# Q
How do I get a free Salesforce Demo org with Omnistudio?

# A
There are many different ways to get an OmniStudio enabled Salesforce org you can play with, depending upon your relationship with Salesforce (employee, partner, customer, or, um, trailheader?). Regardless, you can get an OmniStudio enabled org with a 180-day lifespan for free here:\n\nhttps://trailhead.salesforce.com/promo/orgs/omnistudiotrails\n\n
# Q
Is there a way to obtain a complimentary Salesforce Demo org using Omnistudio?
# A
There are many different ways to get an OmniStudio enabled Salesforce org you can play with, depending upon your relationship with Salesforce (employee, partner, customer, or, um, trailheader?). Regardless, you can get an OmniStudio enabled org with a 180-day lifespan for free here:\n\nhttps://trailhead.salesforce.com/promo/orgs/omnistudiotrails\n\n
# Q
Can I acquire a free Salesforce Demo org by using Omnistudio?
# A
There are many different ways to get an OmniStudio enabled Salesforce org you can play with, depending upon your relationship with Salesforce (employee, partner, customer, or, um, trailheader?). Regardless, you can get an OmniStudio enabled org with a 180-day lifespan for free here:\n\nhttps://trailhead.salesforce.com/promo/orgs/omnistudiotrails\n\n
# Q
What is the process for getting a no-cost Salesforce Demo org with Omnistudio?
# A
There are many different ways to get an OmniStudio enabled Salesforce org you can play with, depending upon your relationship with Salesforce (employee, partner, customer, or, um, trailheader?). Regardless, you can get an OmniStudio enabled org with a 180-day lifespan for free here:\n\nhttps://trailhead.salesforce.com/promo/orgs/omnistudiotrails\n\n
# Q
Are there any steps to follow in order to obtain a free Salesforce Demo org using Omnistudio?
# A
There are many different ways to get an OmniStudio enabled Salesforce org you can play with, depending upon your relationship with Salesforce (employee, partner, customer, or, um, trailheader?). Regardless, you can get an OmniStudio enabled org with a 180-day lifespan for free here:\n\nhttps://trailhead.salesforce.com/promo/orgs/omnistudiotrails\n\n
# Q
Is it possible to get a complimentary Salesforce Demo org by utilizing Omnistudio?
# A
There are many different ways to get an OmniStudio enabled Salesforce org you can play with, depending upon your relationship with Salesforce (employee, partner, customer, or, um, trailheader?). Regardless, you can get an OmniStudio enabled org with a 180-day lifespan for free here:\n\nhttps://trailhead.salesforce.com/promo/orgs/omnistudiotrails\n\n
# Q
How can I get a free Salesforce Demo org with Omnistudio?
# A
There are many different ways to get an OmniStudio enabled Salesforce org you can play with, depending upon your relationship with Salesforce (employee, partner, customer, or, um, trailheader?). Regardless, you can get an OmniStudio enabled org with a 180-day lifespan for free here:\n\nhttps://trailhead.salesforce.com/promo/orgs/omnistudiotrails\n\n
# Q
Are there any options for obtaining a no-cost Salesforce Demo org with Omnistudio?
# A
There are many different ways to get an OmniStudio enabled Salesforce org you can play with, depending upon your relationship with Salesforce (employee, partner, customer, or, um, trailheader?). Regardless, you can get an OmniStudio enabled org with a 180-day lifespan for free here:\n\nhttps://trailhead.salesforce.com/promo/orgs/omnistudiotrails\n\n
# Q
What are the steps involved in getting a free Salesforce Demo org using Omnistudio?
# A
There are many different ways to get an OmniStudio enabled Salesforce org you can play with, depending upon your relationship with Salesforce (employee, partner, customer, or, um, trailheader?). Regardless, you can get an OmniStudio enabled org with a 180-day lifespan for free here:\n\nhttps://trailhead.salesforce.com/promo/orgs/omnistudiotrails\n\n
# Q
Can you guide me on how to get a free Salesforce Demo org with Omnistudio?
# A
There are many different ways to get an OmniStudio enabled Salesforce org you can play with, depending upon your relationship with Salesforce (employee, partner, customer, or, um, trailheader?). Regardless, you can get an OmniStudio enabled org with a 180-day lifespan for free here:\n\nhttps://trailhead.salesforce.com/promo/orgs/omnistudiotrails\n\n
# Q
Is there a way to acquire a complimentary Salesforce Demo org by using Omnistudio?
# A
There are many different ways to get an OmniStudio enabled Salesforce org you can play with, depending upon your relationship with Salesforce (employee, partner, customer, or, um, trailheader?). Regardless, you can get an OmniStudio enabled org with a 180-day lifespan for free here:\n\nhttps://trailhead.salesforce.com/promo/orgs/omnistudiotrails\n\n
# Q
How do I get an OpenAI API Key?

# A
If you don’t have an Open AI platform account (ChatGPT plus or Dall-E does not count), go here to create one:\n\nhttps://platform.openai.com/signup\n\nDuring the process, you’ll need to set a usage limit. I picked $10, under the assumption that I’ll never go over it when playing with it but if I do something’s gone terribly wrong. Hopefully, you won’t even have to go over the free credits they give you.\n\nMake sure you pick an amount you are comfortable with. You never know who might take a liking to your project and demo the heck out of it.\n\nYou will get a key from Open AI that looks like:\n\nSK-...\n\nWith the dots replaced with the actual key.\n\nMake sure you save your API key somewhere because you only get shown it once. If you forget it, you’ll have to generate a new key. That’s not a big inconvenience, unless you excel at losing it.\n\n
# Q
What is the process for obtaining an OpenAI API Key?
# A
If you don’t have an Open AI platform account (ChatGPT plus or Dall-E does not count), go here to create one:\n\nhttps://platform.openai.com/signup\n\nDuring the process, you’ll need to set a usage limit. I picked $10, under the assumption that I’ll never go over it when playing with it but if I do something’s gone terribly wrong. Hopefully, you won’t even have to go over the free credits they give you.\n\nMake sure you pick an amount you are comfortable with. You never know who might take a liking to your project and demo the heck out of it.\n\nYou will get a key from Open AI that looks like:\n\nSK-...\n\nWith the dots replaced with the actual key.\n\nMake sure you save your API key somewhere because you only get shown it once. If you forget it, you’ll have to generate a new key. That’s not a big inconvenience, unless you excel at losing it.\n\n
# Q
Can you guide me on how to obtain an OpenAI API Key?
# A
If you don’t have an Open AI platform account (ChatGPT plus or Dall-E does not count), go here to create one:\n\nhttps://platform.openai.com/signup\n\nDuring the process, you’ll need to set a usage limit. I picked $10, under the assumption that I’ll never go over it when playing with it but if I do something’s gone terribly wrong. Hopefully, you won’t even have to go over the free credits they give you.\n\nMake sure you pick an amount you are comfortable with. You never know who might take a liking to your project and demo the heck out of it.\n\nYou will get a key from Open AI that looks like:\n\nSK-...\n\nWith the dots replaced with the actual key.\n\nMake sure you save your API key somewhere because you only get shown it once. If you forget it, you’ll have to generate a new key. That’s not a big inconvenience, unless you excel at losing it.\n\n
# Q
I would like to know the steps to get an OpenAI API Key.
# A
If you don’t have an Open AI platform account (ChatGPT plus or Dall-E does not count), go here to create one:\n\nhttps://platform.openai.com/signup\n\nDuring the process, you’ll need to set a usage limit. I picked $10, under the assumption that I’ll never go over it when playing with it but if I do something’s gone terribly wrong. Hopefully, you won’t even have to go over the free credits they give you.\n\nMake sure you pick an amount you are comfortable with. You never know who might take a liking to your project and demo the heck out of it.\n\nYou will get a key from Open AI that looks like:\n\nSK-...\n\nWith the dots replaced with the actual key.\n\nMake sure you save your API key somewhere because you only get shown it once. If you forget it, you’ll have to generate a new key. That’s not a big inconvenience, unless you excel at losing it.\n\n
# Q
What are the requirements for obtaining an OpenAI API Key?
# A
If you don’t have an Open AI platform account (ChatGPT plus or Dall-E does not count), go here to create one:\n\nhttps://platform.openai.com/signup\n\nDuring the process, you’ll need to set a usage limit. I picked $10, under the assumption that I’ll never go over it when playing with it but if I do something’s gone terribly wrong. Hopefully, you won’t even have to go over the free credits they give you.\n\nMake sure you pick an amount you are comfortable with. You never know who might take a liking to your project and demo the heck out of it.\n\nYou will get a key from Open AI that looks like:\n\nSK-...\n\nWith the dots replaced with the actual key.\n\nMake sure you save your API key somewhere because you only get shown it once. If you forget it, you’ll have to generate a new key. That’s not a big inconvenience, unless you excel at losing it.\n\n
# Q
Could you provide information on how to get an OpenAI API Key?
# A
If you don’t have an Open AI platform account (ChatGPT plus or Dall-E does not count), go here to create one:\n\nhttps://platform.openai.com/signup\n\nDuring the process, you’ll need to set a usage limit. I picked $10, under the assumption that I’ll never go over it when playing with it but if I do something’s gone terribly wrong. Hopefully, you won’t even have to go over the free credits they give you.\n\nMake sure you pick an amount you are comfortable with. You never know who might take a liking to your project and demo the heck out of it.\n\nYou will get a key from Open AI that looks like:\n\nSK-...\n\nWith the dots replaced with the actual key.\n\nMake sure you save your API key somewhere because you only get shown it once. If you forget it, you’ll have to generate a new key. That’s not a big inconvenience, unless you excel at losing it.\n\n
# Q
Is there a specific procedure to follow in order to get an OpenAI API Key?
# A
If you don’t have an Open AI platform account (ChatGPT plus or Dall-E does not count), go here to create one:\n\nhttps://platform.openai.com/signup\n\nDuring the process, you’ll need to set a usage limit. I picked $10, under the assumption that I’ll never go over it when playing with it but if I do something’s gone terribly wrong. Hopefully, you won’t even have to go over the free credits they give you.\n\nMake sure you pick an amount you are comfortable with. You never know who might take a liking to your project and demo the heck out of it.\n\nYou will get a key from Open AI that looks like:\n\nSK-...\n\nWith the dots replaced with the actual key.\n\nMake sure you save your API key somewhere because you only get shown it once. If you forget it, you’ll have to generate a new key. That’s not a big inconvenience, unless you excel at losing it.\n\n
# Q
Please explain how I can obtain an OpenAI API Key.
# A
If you don’t have an Open AI platform account (ChatGPT plus or Dall-E does not count), go here to create one:\n\nhttps://platform.openai.com/signup\n\nDuring the process, you’ll need to set a usage limit. I picked $10, under the assumption that I’ll never go over it when playing with it but if I do something’s gone terribly wrong. Hopefully, you won’t even have to go over the free credits they give you.\n\nMake sure you pick an amount you are comfortable with. You never know who might take a liking to your project and demo the heck out of it.\n\nYou will get a key from Open AI that looks like:\n\nSK-...\n\nWith the dots replaced with the actual key.\n\nMake sure you save your API key somewhere because you only get shown it once. If you forget it, you’ll have to generate a new key. That’s not a big inconvenience, unless you excel at losing it.\n\n
# Q
Are there any prerequisites for getting an OpenAI API Key?
# A
If you don’t have an Open AI platform account (ChatGPT plus or Dall-E does not count), go here to create one:\n\nhttps://platform.openai.com/signup\n\nDuring the process, you’ll need to set a usage limit. I picked $10, under the assumption that I’ll never go over it when playing with it but if I do something’s gone terribly wrong. Hopefully, you won’t even have to go over the free credits they give you.\n\nMake sure you pick an amount you are comfortable with. You never know who might take a liking to your project and demo the heck out of it.\n\nYou will get a key from Open AI that looks like:\n\nSK-...\n\nWith the dots replaced with the actual key.\n\nMake sure you save your API key somewhere because you only get shown it once. If you forget it, you’ll have to generate a new key. That’s not a big inconvenience, unless you excel at losing it.\n\n
# Q
I'm interested in getting an OpenAI API Key. How can I proceed?
# A
If you don’t have an Open AI platform account (ChatGPT plus or Dall-E does not count), go here to create one:\n\nhttps://platform.openai.com/signup\n\nDuring the process, you’ll need to set a usage limit. I picked $10, under the assumption that I’ll never go over it when playing with it but if I do something’s gone terribly wrong. Hopefully, you won’t even have to go over the free credits they give you.\n\nMake sure you pick an amount you are comfortable with. You never know who might take a liking to your project and demo the heck out of it.\n\nYou will get a key from Open AI that looks like:\n\nSK-...\n\nWith the dots replaced with the actual key.\n\nMake sure you save your API key somewhere because you only get shown it once. If you forget it, you’ll have to generate a new key. That’s not a big inconvenience, unless you excel at losing it.\n\n
# Q
Can you assist me in acquiring an OpenAI API Key?
# A
If you don’t have an Open AI platform account (ChatGPT plus or Dall-E does not count), go here to create one:\n\nhttps://platform.openai.com/signup\n\nDuring the process, you’ll need to set a usage limit. I picked $10, under the assumption that I’ll never go over it when playing with it but if I do something’s gone terribly wrong. Hopefully, you won’t even have to go over the free credits they give you.\n\nMake sure you pick an amount you are comfortable with. You never know who might take a liking to your project and demo the heck out of it.\n\nYou will get a key from Open AI that looks like:\n\nSK-...\n\nWith the dots replaced with the actual key.\n\nMake sure you save your API key somewhere because you only get shown it once. If you forget it, you’ll have to generate a new key. That’s not a big inconvenience, unless you excel at losing it.\n\n
# Q
How do I set up remote site settings in Salesforce to let me call OpenAI's API?

# A
The first step is to go into the Remote Site Settings in Salesforce Setup and tell the org it’s OK to access OpenAI. Press the “New Remote Site” button, and then enter the URL (and name) for OpenAI:\n\n* Name: OpenAI\n* URL: https://api.openai.com\n\nPress Save, and you’re allowed to make calls to the API.\n\n
# Q
What is the process for configuring remote site settings in Salesforce to enable calling OpenAI's API?
# A
The first step is to go into the Remote Site Settings in Salesforce Setup and tell the org it’s OK to access OpenAI. Press the “New Remote Site” button, and then enter the URL (and name) for OpenAI:\n\n* Name: OpenAI\n* URL: https://api.openai.com\n\nPress Save, and you’re allowed to make calls to the API.\n\n
# Q
Can you guide me on setting up remote site settings in Salesforce to allow me to make API calls to OpenAI?
# A
The first step is to go into the Remote Site Settings in Salesforce Setup and tell the org it’s OK to access OpenAI. Press the “New Remote Site” button, and then enter the URL (and name) for OpenAI:\n\n* Name: OpenAI\n* URL: https://api.openai.com\n\nPress Save, and you’re allowed to make calls to the API.\n\n
# Q
I need assistance with configuring remote site settings in Salesforce so that I can utilize OpenAI's API. Can you help?
# A
The first step is to go into the Remote Site Settings in Salesforce Setup and tell the org it’s OK to access OpenAI. Press the “New Remote Site” button, and then enter the URL (and name) for OpenAI:\n\n* Name: OpenAI\n* URL: https://api.openai.com\n\nPress Save, and you’re allowed to make calls to the API.\n\n
# Q
Please provide instructions on how to set up remote site settings in Salesforce for calling OpenAI's API.
# A
The first step is to go into the Remote Site Settings in Salesforce Setup and tell the org it’s OK to access OpenAI. Press the “New Remote Site” button, and then enter the URL (and name) for OpenAI:\n\n* Name: OpenAI\n* URL: https://api.openai.com\n\nPress Save, and you’re allowed to make calls to the API.\n\n
# Q
I'm looking for guidance on configuring remote site settings in Salesforce to enable API calls to OpenAI. Any advice?
# A
The first step is to go into the Remote Site Settings in Salesforce Setup and tell the org it’s OK to access OpenAI. Press the “New Remote Site” button, and then enter the URL (and name) for OpenAI:\n\n* Name: OpenAI\n* URL: https://api.openai.com\n\nPress Save, and you’re allowed to make calls to the API.\n\n
# Q
Is there a step-by-step guide available for setting up remote site settings in Salesforce to let me call OpenAI's API?
# A
The first step is to go into the Remote Site Settings in Salesforce Setup and tell the org it’s OK to access OpenAI. Press the “New Remote Site” button, and then enter the URL (and name) for OpenAI:\n\n* Name: OpenAI\n* URL: https://api.openai.com\n\nPress Save, and you’re allowed to make calls to the API.\n\n
# Q
Could you walk me through the process of configuring remote site settings in Salesforce to allow API calls to OpenAI?
# A
The first step is to go into the Remote Site Settings in Salesforce Setup and tell the org it’s OK to access OpenAI. Press the “New Remote Site” button, and then enter the URL (and name) for OpenAI:\n\n* Name: OpenAI\n* URL: https://api.openai.com\n\nPress Save, and you’re allowed to make calls to the API.\n\n
# Q
What are the necessary steps to configure remote site settings in Salesforce for making API calls to OpenAI?
# A
The first step is to go into the Remote Site Settings in Salesforce Setup and tell the org it’s OK to access OpenAI. Press the “New Remote Site” button, and then enter the URL (and name) for OpenAI:\n\n* Name: OpenAI\n* URL: https://api.openai.com\n\nPress Save, and you’re allowed to make calls to the API.\n\n
# Q
I'm having trouble setting up remote site settings in Salesforce to call OpenAI's API. Any suggestions?
# A
The first step is to go into the Remote Site Settings in Salesforce Setup and tell the org it’s OK to access OpenAI. Press the “New Remote Site” button, and then enter the URL (and name) for OpenAI:\n\n* Name: OpenAI\n* URL: https://api.openai.com\n\nPress Save, and you’re allowed to make calls to the API.\n\n
# Q
Can you provide any tips or best practices for configuring remote site settings in Salesforce to enable calling OpenAI's API?
# A
The first step is to go into the Remote Site Settings in Salesforce Setup and tell the org it’s OK to access OpenAI. Press the “New Remote Site” button, and then enter the URL (and name) for OpenAI:\n\n* Name: OpenAI\n* URL: https://api.openai.com\n\nPress Save, and you’re allowed to make calls to the API.\n\n
# Q
How do I build a simple integration procedure to test my ability to call OpenAI's API?

# A
1. From the OmniStudio Integration Procedures page, click the new button to start creating our Integration Procedure. When you do that, you’ll be asked to enter the name, type, and subtype for the new procedure:\n\n* Type: OpenAI\n\n* SubType: DirectTest\n\n* Name: anything you like, but I tend to use the type and subtype together in some form\n\nWhen you’ve entered that data, press Save at the bottom to allow you to start editing your Integration Procedure.\n\nNow, drag out an HTTP Action element. You will configure it like this:\n* The Element Name is getModels (to be clear, it doesn’t matter, except that the name here is used in the Response action and so the two have to match.)\n* The HTTP Path needs to be “https://api.openai.com/v1/models”.\n* The HTTP Method is “GET”\n\nExpand the REST OPTIONS section and click “Add New Header:\n\n* Key=Authorization\n* Value=Bearer sk-your OpenAI key3\n\nIf you preview the Integration Procedure now, you won’t see a result, but in the Debug Log you should see the full response from Open AI. Depending upon how impatient you are you can preview or not.\n\nDrag out a Response Action in your Integration Procedure. Configure it like this:\n\n* The Send JSON Path is getModels:data\n* Preview it, and you should see the list of models in the response.\n\nGo back to the Properties and click on “Procedure Configuration” and then click on the\n“Activate Version” button at the bottom.\n\nCongratulations, you have a working integration procedure!!!\n\n
# Q
What is the process for creating a basic integration to test my ability to call OpenAI's API?
# A
1. From the OmniStudio Integration Procedures page, click the new button to start creating our Integration Procedure. When you do that, you’ll be asked to enter the name, type, and subtype for the new procedure:\n\n* Type: OpenAI\n\n* SubType: DirectTest\n\n* Name: anything you like, but I tend to use the type and subtype together in some form\n\nWhen you’ve entered that data, press Save at the bottom to allow you to start editing your Integration Procedure.\n\nNow, drag out an HTTP Action element. You will configure it like this:\n* The Element Name is getModels (to be clear, it doesn’t matter, except that the name here is used in the Response action and so the two have to match.)\n* The HTTP Path needs to be “https://api.openai.com/v1/models”.\n* The HTTP Method is “GET”\n\nExpand the REST OPTIONS section and click “Add New Header:\n\n* Key=Authorization\n* Value=Bearer sk-your OpenAI key3\n\nIf you preview the Integration Procedure now, you won’t see a result, but in the Debug Log you should see the full response from Open AI. Depending upon how impatient you are you can preview or not.\n\nDrag out a Response Action in your Integration Procedure. Configure it like this:\n\n* The Send JSON Path is getModels:data\n* Preview it, and you should see the list of models in the response.\n\nGo back to the Properties and click on “Procedure Configuration” and then click on the\n“Activate Version” button at the bottom.\n\nCongratulations, you have a working integration procedure!!!\n\n
# Q
Can you explain the steps involved in building a simple integration to test my ability to call OpenAI's API?
# A
1. From the OmniStudio Integration Procedures page, click the new button to start creating our Integration Procedure. When you do that, you’ll be asked to enter the name, type, and subtype for the new procedure:\n\n* Type: OpenAI\n\n* SubType: DirectTest\n\n* Name: anything you like, but I tend to use the type and subtype together in some form\n\nWhen you’ve entered that data, press Save at the bottom to allow you to start editing your Integration Procedure.\n\nNow, drag out an HTTP Action element. You will configure it like this:\n* The Element Name is getModels (to be clear, it doesn’t matter, except that the name here is used in the Response action and so the two have to match.)\n* The HTTP Path needs to be “https://api.openai.com/v1/models”.\n* The HTTP Method is “GET”\n\nExpand the REST OPTIONS section and click “Add New Header:\n\n* Key=Authorization\n* Value=Bearer sk-your OpenAI key3\n\nIf you preview the Integration Procedure now, you won’t see a result, but in the Debug Log you should see the full response from Open AI. Depending upon how impatient you are you can preview or not.\n\nDrag out a Response Action in your Integration Procedure. Configure it like this:\n\n* The Send JSON Path is getModels:data\n* Preview it, and you should see the list of models in the response.\n\nGo back to the Properties and click on “Procedure Configuration” and then click on the\n“Activate Version” button at the bottom.\n\nCongratulations, you have a working integration procedure!!!\n\n
# Q
I would like to know how to create a straightforward integration procedure to assess my capability to call OpenAI's API.
# A
1. From the OmniStudio Integration Procedures page, click the new button to start creating our Integration Procedure. When you do that, you’ll be asked to enter the name, type, and subtype for the new procedure:\n\n* Type: OpenAI\n\n* SubType: DirectTest\n\n* Name: anything you like, but I tend to use the type and subtype together in some form\n\nWhen you’ve entered that data, press Save at the bottom to allow you to start editing your Integration Procedure.\n\nNow, drag out an HTTP Action element. You will configure it like this:\n* The Element Name is getModels (to be clear, it doesn’t matter, except that the name here is used in the Response action and so the two have to match.)\n* The HTTP Path needs to be “https://api.openai.com/v1/models”.\n* The HTTP Method is “GET”\n\nExpand the REST OPTIONS section and click “Add New Header:\n\n* Key=Authorization\n* Value=Bearer sk-your OpenAI key3\n\nIf you preview the Integration Procedure now, you won’t see a result, but in the Debug Log you should see the full response from Open AI. Depending upon how impatient you are you can preview or not.\n\nDrag out a Response Action in your Integration Procedure. Configure it like this:\n\n* The Send JSON Path is getModels:data\n* Preview it, and you should see the list of models in the response.\n\nGo back to the Properties and click on “Procedure Configuration” and then click on the\n“Activate Version” button at the bottom.\n\nCongratulations, you have a working integration procedure!!!\n\n
# Q
Is there a guide available that outlines the procedure for building a basic integration to test my ability to call OpenAI's API?
# A
1. From the OmniStudio Integration Procedures page, click the new button to start creating our Integration Procedure. When you do that, you’ll be asked to enter the name, type, and subtype for the new procedure:\n\n* Type: OpenAI\n\n* SubType: DirectTest\n\n* Name: anything you like, but I tend to use the type and subtype together in some form\n\nWhen you’ve entered that data, press Save at the bottom to allow you to start editing your Integration Procedure.\n\nNow, drag out an HTTP Action element. You will configure it like this:\n* The Element Name is getModels (to be clear, it doesn’t matter, except that the name here is used in the Response action and so the two have to match.)\n* The HTTP Path needs to be “https://api.openai.com/v1/models”.\n* The HTTP Method is “GET”\n\nExpand the REST OPTIONS section and click “Add New Header:\n\n* Key=Authorization\n* Value=Bearer sk-your OpenAI key3\n\nIf you preview the Integration Procedure now, you won’t see a result, but in the Debug Log you should see the full response from Open AI. Depending upon how impatient you are you can preview or not.\n\nDrag out a Response Action in your Integration Procedure. Configure it like this:\n\n* The Send JSON Path is getModels:data\n* Preview it, and you should see the list of models in the response.\n\nGo back to the Properties and click on “Procedure Configuration” and then click on the\n“Activate Version” button at the bottom.\n\nCongratulations, you have a working integration procedure!!!\n\n
# Q
Could you provide instructions on how to develop a simple integration to evaluate my ability to call OpenAI's API?
# A
1. From the OmniStudio Integration Procedures page, click the new button to start creating our Integration Procedure. When you do that, you’ll be asked to enter the name, type, and subtype for the new procedure:\n\n* Type: OpenAI\n\n* SubType: DirectTest\n\n* Name: anything you like, but I tend to use the type and subtype together in some form\n\nWhen you’ve entered that data, press Save at the bottom to allow you to start editing your Integration Procedure.\n\nNow, drag out an HTTP Action element. You will configure it like this:\n* The Element Name is getModels (to be clear, it doesn’t matter, except that the name here is used in the Response action and so the two have to match.)\n* The HTTP Path needs to be “https://api.openai.com/v1/models”.\n* The HTTP Method is “GET”\n\nExpand the REST OPTIONS section and click “Add New Header:\n\n* Key=Authorization\n* Value=Bearer sk-your OpenAI key3\n\nIf you preview the Integration Procedure now, you won’t see a result, but in the Debug Log you should see the full response from Open AI. Depending upon how impatient you are you can preview or not.\n\nDrag out a Response Action in your Integration Procedure. Configure it like this:\n\n* The Send JSON Path is getModels:data\n* Preview it, and you should see the list of models in the response.\n\nGo back to the Properties and click on “Procedure Configuration” and then click on the\n“Activate Version” button at the bottom.\n\nCongratulations, you have a working integration procedure!!!\n\n
# Q
I'm looking for information on how to construct a basic integration procedure to verify my capability to call OpenAI's API.
# A
1. From the OmniStudio Integration Procedures page, click the new button to start creating our Integration Procedure. When you do that, you’ll be asked to enter the name, type, and subtype for the new procedure:\n\n* Type: OpenAI\n\n* SubType: DirectTest\n\n* Name: anything you like, but I tend to use the type and subtype together in some form\n\nWhen you’ve entered that data, press Save at the bottom to allow you to start editing your Integration Procedure.\n\nNow, drag out an HTTP Action element. You will configure it like this:\n* The Element Name is getModels (to be clear, it doesn’t matter, except that the name here is used in the Response action and so the two have to match.)\n* The HTTP Path needs to be “https://api.openai.com/v1/models”.\n* The HTTP Method is “GET”\n\nExpand the REST OPTIONS section and click “Add New Header:\n\n* Key=Authorization\n* Value=Bearer sk-your OpenAI key3\n\nIf you preview the Integration Procedure now, you won’t see a result, but in the Debug Log you should see the full response from Open AI. Depending upon how impatient you are you can preview or not.\n\nDrag out a Response Action in your Integration Procedure. Configure it like this:\n\n* The Send JSON Path is getModels:data\n* Preview it, and you should see the list of models in the response.\n\nGo back to the Properties and click on “Procedure Configuration” and then click on the\n“Activate Version” button at the bottom.\n\nCongratulations, you have a working integration procedure!!!\n\n
# Q
What are the necessary steps to follow in order to build a simple integration and test my ability to call OpenAI's API?
# A
1. From the OmniStudio Integration Procedures page, click the new button to start creating our Integration Procedure. When you do that, you’ll be asked to enter the name, type, and subtype for the new procedure:\n\n* Type: OpenAI\n\n* SubType: DirectTest\n\n* Name: anything you like, but I tend to use the type and subtype together in some form\n\nWhen you’ve entered that data, press Save at the bottom to allow you to start editing your Integration Procedure.\n\nNow, drag out an HTTP Action element. You will configure it like this:\n* The Element Name is getModels (to be clear, it doesn’t matter, except that the name here is used in the Response action and so the two have to match.)\n* The HTTP Path needs to be “https://api.openai.com/v1/models”.\n* The HTTP Method is “GET”\n\nExpand the REST OPTIONS section and click “Add New Header:\n\n* Key=Authorization\n* Value=Bearer sk-your OpenAI key3\n\nIf you preview the Integration Procedure now, you won’t see a result, but in the Debug Log you should see the full response from Open AI. Depending upon how impatient you are you can preview or not.\n\nDrag out a Response Action in your Integration Procedure. Configure it like this:\n\n* The Send JSON Path is getModels:data\n* Preview it, and you should see the list of models in the response.\n\nGo back to the Properties and click on “Procedure Configuration” and then click on the\n“Activate Version” button at the bottom.\n\nCongratulations, you have a working integration procedure!!!\n\n
# Q
Is there a recommended approach for creating a basic integration to assess my capability to call OpenAI's API?
# A
1. From the OmniStudio Integration Procedures page, click the new button to start creating our Integration Procedure. When you do that, you’ll be asked to enter the name, type, and subtype for the new procedure:\n\n* Type: OpenAI\n\n* SubType: DirectTest\n\n* Name: anything you like, but I tend to use the type and subtype together in some form\n\nWhen you’ve entered that data, press Save at the bottom to allow you to start editing your Integration Procedure.\n\nNow, drag out an HTTP Action element. You will configure it like this:\n* The Element Name is getModels (to be clear, it doesn’t matter, except that the name here is used in the Response action and so the two have to match.)\n* The HTTP Path needs to be “https://api.openai.com/v1/models”.\n* The HTTP Method is “GET”\n\nExpand the REST OPTIONS section and click “Add New Header:\n\n* Key=Authorization\n* Value=Bearer sk-your OpenAI key3\n\nIf you preview the Integration Procedure now, you won’t see a result, but in the Debug Log you should see the full response from Open AI. Depending upon how impatient you are you can preview or not.\n\nDrag out a Response Action in your Integration Procedure. Configure it like this:\n\n* The Send JSON Path is getModels:data\n* Preview it, and you should see the list of models in the response.\n\nGo back to the Properties and click on “Procedure Configuration” and then click on the\n“Activate Version” button at the bottom.\n\nCongratulations, you have a working integration procedure!!!\n\n
# Q
Can you walk me through the process of building a straightforward integration to test my ability to call OpenAI's API?
# A
1. From the OmniStudio Integration Procedures page, click the new button to start creating our Integration Procedure. When you do that, you’ll be asked to enter the name, type, and subtype for the new procedure:\n\n* Type: OpenAI\n\n* SubType: DirectTest\n\n* Name: anything you like, but I tend to use the type and subtype together in some form\n\nWhen you’ve entered that data, press Save at the bottom to allow you to start editing your Integration Procedure.\n\nNow, drag out an HTTP Action element. You will configure it like this:\n* The Element Name is getModels (to be clear, it doesn’t matter, except that the name here is used in the Response action and so the two have to match.)\n* The HTTP Path needs to be “https://api.openai.com/v1/models”.\n* The HTTP Method is “GET”\n\nExpand the REST OPTIONS section and click “Add New Header:\n\n* Key=Authorization\n* Value=Bearer sk-your OpenAI key3\n\nIf you preview the Integration Procedure now, you won’t see a result, but in the Debug Log you should see the full response from Open AI. Depending upon how impatient you are you can preview or not.\n\nDrag out a Response Action in your Integration Procedure. Configure it like this:\n\n* The Send JSON Path is getModels:data\n* Preview it, and you should see the list of models in the response.\n\nGo back to the Properties and click on “Procedure Configuration” and then click on the\n“Activate Version” button at the bottom.\n\nCongratulations, you have a working integration procedure!!!\n\n
# Q
I need guidance on how to build a simple integration procedure to evaluate my ability to call OpenAI's API.
# A
1. From the OmniStudio Integration Procedures page, click the new button to start creating our Integration Procedure. When you do that, you’ll be asked to enter the name, type, and subtype for the new procedure:\n\n* Type: OpenAI\n\n* SubType: DirectTest\n\n* Name: anything you like, but I tend to use the type and subtype together in some form\n\nWhen you’ve entered that data, press Save at the bottom to allow you to start editing your Integration Procedure.\n\nNow, drag out an HTTP Action element. You will configure it like this:\n* The Element Name is getModels (to be clear, it doesn’t matter, except that the name here is used in the Response action and so the two have to match.)\n* The HTTP Path needs to be “https://api.openai.com/v1/models”.\n* The HTTP Method is “GET”\n\nExpand the REST OPTIONS section and click “Add New Header:\n\n* Key=Authorization\n* Value=Bearer sk-your OpenAI key3\n\nIf you preview the Integration Procedure now, you won’t see a result, but in the Debug Log you should see the full response from Open AI. Depending upon how impatient you are you can preview or not.\n\nDrag out a Response Action in your Integration Procedure. Configure it like this:\n\n* The Send JSON Path is getModels:data\n* Preview it, and you should see the list of models in the response.\n\nGo back to the Properties and click on “Procedure Configuration” and then click on the\n“Activate Version” button at the bottom.\n\nCongratulations, you have a working integration procedure!!!\n\n
# Q
How do I build a product recommendation engine for life insurance using GPT and Salesforce?

# A
You will need to create an Integration Procedure and an OmniScript.\n\nFirst, the integration procedure:\n\nIt will consist of 4 elements.  The first is a set values, the second a HTTP action, the third another set values, and the fourth a response action.\n\nThe first set values prepares the input to GPT.  Call it "gptInputs", and set the name "inputs" to the following JSON structure:\n\n	{\n		"model": "gpt-3.5-turbo",\n		"temperature": 0.2,\n		"max_tokens": 2048,\n		"messages": [\n			{\n				"role": "system",\n				"content": "%prompts:gptSystem%"\n			},\n			{\n				"role": "user",\n				"content": "%prompts:gptQuestion%"\n			}\n		]\n	}\n\nNext, create an HTTP action named "callGPT". Set the following values in it:\n\n	"sendJSONPath": "gptInputs:inputs"\n	"restPath": "/v1/chat/completions"\n	"restMethod": "POST"\n	"headers": { "Content-Type": "application/json" }\n	"namedCredential": "OpenAI"\n\nNote that you need to have a pre-existing named credential called OpenAI.\n\nNow, create a set vallues called "parseResult". Set the following values in it:\n\n	"responses": "=DESERIALIZE(%callGPT:choices|1:message:content%)"\n\nFinally, create a Response Action with the following parameters:\n\n    "sendJSONPath": "parseResult:responses"\n    "sendJSONNode": "response"\n\n\nSecond, the OmniScript:\n\nThe first element is a Set Values, setting the following:\n\n	  "elementValueMap": {\n		"thePrompt": "You are an experienced life insurance agent.  It is your job to recommend the best policy type for your customer, based upon their needs. \n\nIn addition, for the type of policy you recommend, you should describe it's pluses and minuses in detail and be explicit about how it works. \n\nA customer will tell you what they need in the way of life insurance.   From their needs, you should be able to understand how long they need insurance for, what the purpose is, and whether they are looking for the cheapest insurance or one that is more expensive but with more value. \n\nYour response should be in JSON, and include the following elements:\n\n* policy_type\n* policy_duration\n* purpose\n* pluses, an array of advantages\n* minuses, an array of disadvantages\n* full_text, the complete explanation of all elements of the recommendation"\n	  },\n\nSecond is a step.  The step will have the following elements:\n* a Text Area called 'taNeeds'\n* An intgegration procedure action that calls our integration procedure.  It will have an extra payload that looks like:\n\n		"prompts": {\n		  "gptSystem": "%thePrompt%",\n		  "gptQuestion": "%taNeeds%"\n		}\n\nFinally, two formula fields are put on the step:\n\n* Policy Type, with the formula %response:policy_type%\n* Policy Duration, with the formula %response:policy_duration%\n\nYou can augment the UI with formatting, demo buttons, etc.\n\n
# Q
What is the process of creating a life insurance product recommendation engine using GPT and Salesforce?
# A
You will need to create an Integration Procedure and an OmniScript.\n\nFirst, the integration procedure:\n\nIt will consist of 4 elements.  The first is a set values, the second a HTTP action, the third another set values, and the fourth a response action.\n\nThe first set values prepares the input to GPT.  Call it "gptInputs", and set the name "inputs" to the following JSON structure:\n\n	{\n		"model": "gpt-3.5-turbo",\n		"temperature": 0.2,\n		"max_tokens": 2048,\n		"messages": [\n			{\n				"role": "system",\n				"content": "%prompts:gptSystem%"\n			},\n			{\n				"role": "user",\n				"content": "%prompts:gptQuestion%"\n			}\n		]\n	}\n\nNext, create an HTTP action named "callGPT". Set the following values in it:\n\n	"sendJSONPath": "gptInputs:inputs"\n	"restPath": "/v1/chat/completions"\n	"restMethod": "POST"\n	"headers": { "Content-Type": "application/json" }\n	"namedCredential": "OpenAI"\n\nNote that you need to have a pre-existing named credential called OpenAI.\n\nNow, create a set vallues called "parseResult". Set the following values in it:\n\n	"responses": "=DESERIALIZE(%callGPT:choices|1:message:content%)"\n\nFinally, create a Response Action with the following parameters:\n\n    "sendJSONPath": "parseResult:responses"\n    "sendJSONNode": "response"\n\n\nSecond, the OmniScript:\n\nThe first element is a Set Values, setting the following:\n\n	  "elementValueMap": {\n		"thePrompt": "You are an experienced life insurance agent.  It is your job to recommend the best policy type for your customer, based upon their needs. \n\nIn addition, for the type of policy you recommend, you should describe it's pluses and minuses in detail and be explicit about how it works. \n\nA customer will tell you what they need in the way of life insurance.   From their needs, you should be able to understand how long they need insurance for, what the purpose is, and whether they are looking for the cheapest insurance or one that is more expensive but with more value. \n\nYour response should be in JSON, and include the following elements:\n\n* policy_type\n* policy_duration\n* purpose\n* pluses, an array of advantages\n* minuses, an array of disadvantages\n* full_text, the complete explanation of all elements of the recommendation"\n	  },\n\nSecond is a step.  The step will have the following elements:\n* a Text Area called 'taNeeds'\n* An intgegration procedure action that calls our integration procedure.  It will have an extra payload that looks like:\n\n		"prompts": {\n		  "gptSystem": "%thePrompt%",\n		  "gptQuestion": "%taNeeds%"\n		}\n\nFinally, two formula fields are put on the step:\n\n* Policy Type, with the formula %response:policy_type%\n* Policy Duration, with the formula %response:policy_duration%\n\nYou can augment the UI with formatting, demo buttons, etc.\n\n
# Q
Can you guide me on building a life insurance product recommendation engine with GPT and Salesforce?
# A
You will need to create an Integration Procedure and an OmniScript.\n\nFirst, the integration procedure:\n\nIt will consist of 4 elements.  The first is a set values, the second a HTTP action, the third another set values, and the fourth a response action.\n\nThe first set values prepares the input to GPT.  Call it "gptInputs", and set the name "inputs" to the following JSON structure:\n\n	{\n		"model": "gpt-3.5-turbo",\n		"temperature": 0.2,\n		"max_tokens": 2048,\n		"messages": [\n			{\n				"role": "system",\n				"content": "%prompts:gptSystem%"\n			},\n			{\n				"role": "user",\n				"content": "%prompts:gptQuestion%"\n			}\n		]\n	}\n\nNext, create an HTTP action named "callGPT". Set the following values in it:\n\n	"sendJSONPath": "gptInputs:inputs"\n	"restPath": "/v1/chat/completions"\n	"restMethod": "POST"\n	"headers": { "Content-Type": "application/json" }\n	"namedCredential": "OpenAI"\n\nNote that you need to have a pre-existing named credential called OpenAI.\n\nNow, create a set vallues called "parseResult". Set the following values in it:\n\n	"responses": "=DESERIALIZE(%callGPT:choices|1:message:content%)"\n\nFinally, create a Response Action with the following parameters:\n\n    "sendJSONPath": "parseResult:responses"\n    "sendJSONNode": "response"\n\n\nSecond, the OmniScript:\n\nThe first element is a Set Values, setting the following:\n\n	  "elementValueMap": {\n		"thePrompt": "You are an experienced life insurance agent.  It is your job to recommend the best policy type for your customer, based upon their needs. \n\nIn addition, for the type of policy you recommend, you should describe it's pluses and minuses in detail and be explicit about how it works. \n\nA customer will tell you what they need in the way of life insurance.   From their needs, you should be able to understand how long they need insurance for, what the purpose is, and whether they are looking for the cheapest insurance or one that is more expensive but with more value. \n\nYour response should be in JSON, and include the following elements:\n\n* policy_type\n* policy_duration\n* purpose\n* pluses, an array of advantages\n* minuses, an array of disadvantages\n* full_text, the complete explanation of all elements of the recommendation"\n	  },\n\nSecond is a step.  The step will have the following elements:\n* a Text Area called 'taNeeds'\n* An intgegration procedure action that calls our integration procedure.  It will have an extra payload that looks like:\n\n		"prompts": {\n		  "gptSystem": "%thePrompt%",\n		  "gptQuestion": "%taNeeds%"\n		}\n\nFinally, two formula fields are put on the step:\n\n* Policy Type, with the formula %response:policy_type%\n* Policy Duration, with the formula %response:policy_duration%\n\nYou can augment the UI with formatting, demo buttons, etc.\n\n
# Q
I'm interested in developing a life insurance product recommendation engine using GPT and Salesforce. How should I proceed?
# A
You will need to create an Integration Procedure and an OmniScript.\n\nFirst, the integration procedure:\n\nIt will consist of 4 elements.  The first is a set values, the second a HTTP action, the third another set values, and the fourth a response action.\n\nThe first set values prepares the input to GPT.  Call it "gptInputs", and set the name "inputs" to the following JSON structure:\n\n	{\n		"model": "gpt-3.5-turbo",\n		"temperature": 0.2,\n		"max_tokens": 2048,\n		"messages": [\n			{\n				"role": "system",\n				"content": "%prompts:gptSystem%"\n			},\n			{\n				"role": "user",\n				"content": "%prompts:gptQuestion%"\n			}\n		]\n	}\n\nNext, create an HTTP action named "callGPT". Set the following values in it:\n\n	"sendJSONPath": "gptInputs:inputs"\n	"restPath": "/v1/chat/completions"\n	"restMethod": "POST"\n	"headers": { "Content-Type": "application/json" }\n	"namedCredential": "OpenAI"\n\nNote that you need to have a pre-existing named credential called OpenAI.\n\nNow, create a set vallues called "parseResult". Set the following values in it:\n\n	"responses": "=DESERIALIZE(%callGPT:choices|1:message:content%)"\n\nFinally, create a Response Action with the following parameters:\n\n    "sendJSONPath": "parseResult:responses"\n    "sendJSONNode": "response"\n\n\nSecond, the OmniScript:\n\nThe first element is a Set Values, setting the following:\n\n	  "elementValueMap": {\n		"thePrompt": "You are an experienced life insurance agent.  It is your job to recommend the best policy type for your customer, based upon their needs. \n\nIn addition, for the type of policy you recommend, you should describe it's pluses and minuses in detail and be explicit about how it works. \n\nA customer will tell you what they need in the way of life insurance.   From their needs, you should be able to understand how long they need insurance for, what the purpose is, and whether they are looking for the cheapest insurance or one that is more expensive but with more value. \n\nYour response should be in JSON, and include the following elements:\n\n* policy_type\n* policy_duration\n* purpose\n* pluses, an array of advantages\n* minuses, an array of disadvantages\n* full_text, the complete explanation of all elements of the recommendation"\n	  },\n\nSecond is a step.  The step will have the following elements:\n* a Text Area called 'taNeeds'\n* An intgegration procedure action that calls our integration procedure.  It will have an extra payload that looks like:\n\n		"prompts": {\n		  "gptSystem": "%thePrompt%",\n		  "gptQuestion": "%taNeeds%"\n		}\n\nFinally, two formula fields are put on the step:\n\n* Policy Type, with the formula %response:policy_type%\n* Policy Duration, with the formula %response:policy_duration%\n\nYou can augment the UI with formatting, demo buttons, etc.\n\n
# Q
Is it possible to leverage GPT and Salesforce to build a product recommendation engine for life insurance?
# A
You will need to create an Integration Procedure and an OmniScript.\n\nFirst, the integration procedure:\n\nIt will consist of 4 elements.  The first is a set values, the second a HTTP action, the third another set values, and the fourth a response action.\n\nThe first set values prepares the input to GPT.  Call it "gptInputs", and set the name "inputs" to the following JSON structure:\n\n	{\n		"model": "gpt-3.5-turbo",\n		"temperature": 0.2,\n		"max_tokens": 2048,\n		"messages": [\n			{\n				"role": "system",\n				"content": "%prompts:gptSystem%"\n			},\n			{\n				"role": "user",\n				"content": "%prompts:gptQuestion%"\n			}\n		]\n	}\n\nNext, create an HTTP action named "callGPT". Set the following values in it:\n\n	"sendJSONPath": "gptInputs:inputs"\n	"restPath": "/v1/chat/completions"\n	"restMethod": "POST"\n	"headers": { "Content-Type": "application/json" }\n	"namedCredential": "OpenAI"\n\nNote that you need to have a pre-existing named credential called OpenAI.\n\nNow, create a set vallues called "parseResult". Set the following values in it:\n\n	"responses": "=DESERIALIZE(%callGPT:choices|1:message:content%)"\n\nFinally, create a Response Action with the following parameters:\n\n    "sendJSONPath": "parseResult:responses"\n    "sendJSONNode": "response"\n\n\nSecond, the OmniScript:\n\nThe first element is a Set Values, setting the following:\n\n	  "elementValueMap": {\n		"thePrompt": "You are an experienced life insurance agent.  It is your job to recommend the best policy type for your customer, based upon their needs. \n\nIn addition, for the type of policy you recommend, you should describe it's pluses and minuses in detail and be explicit about how it works. \n\nA customer will tell you what they need in the way of life insurance.   From their needs, you should be able to understand how long they need insurance for, what the purpose is, and whether they are looking for the cheapest insurance or one that is more expensive but with more value. \n\nYour response should be in JSON, and include the following elements:\n\n* policy_type\n* policy_duration\n* purpose\n* pluses, an array of advantages\n* minuses, an array of disadvantages\n* full_text, the complete explanation of all elements of the recommendation"\n	  },\n\nSecond is a step.  The step will have the following elements:\n* a Text Area called 'taNeeds'\n* An intgegration procedure action that calls our integration procedure.  It will have an extra payload that looks like:\n\n		"prompts": {\n		  "gptSystem": "%thePrompt%",\n		  "gptQuestion": "%taNeeds%"\n		}\n\nFinally, two formula fields are put on the step:\n\n* Policy Type, with the formula %response:policy_type%\n* Policy Duration, with the formula %response:policy_duration%\n\nYou can augment the UI with formatting, demo buttons, etc.\n\n
# Q
Could you provide some insights on using GPT and Salesforce to create a life insurance product recommendation engine?
# A
You will need to create an Integration Procedure and an OmniScript.\n\nFirst, the integration procedure:\n\nIt will consist of 4 elements.  The first is a set values, the second a HTTP action, the third another set values, and the fourth a response action.\n\nThe first set values prepares the input to GPT.  Call it "gptInputs", and set the name "inputs" to the following JSON structure:\n\n	{\n		"model": "gpt-3.5-turbo",\n		"temperature": 0.2,\n		"max_tokens": 2048,\n		"messages": [\n			{\n				"role": "system",\n				"content": "%prompts:gptSystem%"\n			},\n			{\n				"role": "user",\n				"content": "%prompts:gptQuestion%"\n			}\n		]\n	}\n\nNext, create an HTTP action named "callGPT". Set the following values in it:\n\n	"sendJSONPath": "gptInputs:inputs"\n	"restPath": "/v1/chat/completions"\n	"restMethod": "POST"\n	"headers": { "Content-Type": "application/json" }\n	"namedCredential": "OpenAI"\n\nNote that you need to have a pre-existing named credential called OpenAI.\n\nNow, create a set vallues called "parseResult". Set the following values in it:\n\n	"responses": "=DESERIALIZE(%callGPT:choices|1:message:content%)"\n\nFinally, create a Response Action with the following parameters:\n\n    "sendJSONPath": "parseResult:responses"\n    "sendJSONNode": "response"\n\n\nSecond, the OmniScript:\n\nThe first element is a Set Values, setting the following:\n\n	  "elementValueMap": {\n		"thePrompt": "You are an experienced life insurance agent.  It is your job to recommend the best policy type for your customer, based upon their needs. \n\nIn addition, for the type of policy you recommend, you should describe it's pluses and minuses in detail and be explicit about how it works. \n\nA customer will tell you what they need in the way of life insurance.   From their needs, you should be able to understand how long they need insurance for, what the purpose is, and whether they are looking for the cheapest insurance or one that is more expensive but with more value. \n\nYour response should be in JSON, and include the following elements:\n\n* policy_type\n* policy_duration\n* purpose\n* pluses, an array of advantages\n* minuses, an array of disadvantages\n* full_text, the complete explanation of all elements of the recommendation"\n	  },\n\nSecond is a step.  The step will have the following elements:\n* a Text Area called 'taNeeds'\n* An intgegration procedure action that calls our integration procedure.  It will have an extra payload that looks like:\n\n		"prompts": {\n		  "gptSystem": "%thePrompt%",\n		  "gptQuestion": "%taNeeds%"\n		}\n\nFinally, two formula fields are put on the step:\n\n* Policy Type, with the formula %response:policy_type%\n* Policy Duration, with the formula %response:policy_duration%\n\nYou can augment the UI with formatting, demo buttons, etc.\n\n
# Q
I want to explore the possibilities of using GPT and Salesforce to build a product recommendation engine for life insurance. Any suggestions?
# A
You will need to create an Integration Procedure and an OmniScript.\n\nFirst, the integration procedure:\n\nIt will consist of 4 elements.  The first is a set values, the second a HTTP action, the third another set values, and the fourth a response action.\n\nThe first set values prepares the input to GPT.  Call it "gptInputs", and set the name "inputs" to the following JSON structure:\n\n	{\n		"model": "gpt-3.5-turbo",\n		"temperature": 0.2,\n		"max_tokens": 2048,\n		"messages": [\n			{\n				"role": "system",\n				"content": "%prompts:gptSystem%"\n			},\n			{\n				"role": "user",\n				"content": "%prompts:gptQuestion%"\n			}\n		]\n	}\n\nNext, create an HTTP action named "callGPT". Set the following values in it:\n\n	"sendJSONPath": "gptInputs:inputs"\n	"restPath": "/v1/chat/completions"\n	"restMethod": "POST"\n	"headers": { "Content-Type": "application/json" }\n	"namedCredential": "OpenAI"\n\nNote that you need to have a pre-existing named credential called OpenAI.\n\nNow, create a set vallues called "parseResult". Set the following values in it:\n\n	"responses": "=DESERIALIZE(%callGPT:choices|1:message:content%)"\n\nFinally, create a Response Action with the following parameters:\n\n    "sendJSONPath": "parseResult:responses"\n    "sendJSONNode": "response"\n\n\nSecond, the OmniScript:\n\nThe first element is a Set Values, setting the following:\n\n	  "elementValueMap": {\n		"thePrompt": "You are an experienced life insurance agent.  It is your job to recommend the best policy type for your customer, based upon their needs. \n\nIn addition, for the type of policy you recommend, you should describe it's pluses and minuses in detail and be explicit about how it works. \n\nA customer will tell you what they need in the way of life insurance.   From their needs, you should be able to understand how long they need insurance for, what the purpose is, and whether they are looking for the cheapest insurance or one that is more expensive but with more value. \n\nYour response should be in JSON, and include the following elements:\n\n* policy_type\n* policy_duration\n* purpose\n* pluses, an array of advantages\n* minuses, an array of disadvantages\n* full_text, the complete explanation of all elements of the recommendation"\n	  },\n\nSecond is a step.  The step will have the following elements:\n* a Text Area called 'taNeeds'\n* An intgegration procedure action that calls our integration procedure.  It will have an extra payload that looks like:\n\n		"prompts": {\n		  "gptSystem": "%thePrompt%",\n		  "gptQuestion": "%taNeeds%"\n		}\n\nFinally, two formula fields are put on the step:\n\n* Policy Type, with the formula %response:policy_type%\n* Policy Duration, with the formula %response:policy_duration%\n\nYou can augment the UI with formatting, demo buttons, etc.\n\n
# Q
Are there any resources available for building a life insurance product recommendation engine with GPT and Salesforce?
# A
You will need to create an Integration Procedure and an OmniScript.\n\nFirst, the integration procedure:\n\nIt will consist of 4 elements.  The first is a set values, the second a HTTP action, the third another set values, and the fourth a response action.\n\nThe first set values prepares the input to GPT.  Call it "gptInputs", and set the name "inputs" to the following JSON structure:\n\n	{\n		"model": "gpt-3.5-turbo",\n		"temperature": 0.2,\n		"max_tokens": 2048,\n		"messages": [\n			{\n				"role": "system",\n				"content": "%prompts:gptSystem%"\n			},\n			{\n				"role": "user",\n				"content": "%prompts:gptQuestion%"\n			}\n		]\n	}\n\nNext, create an HTTP action named "callGPT". Set the following values in it:\n\n	"sendJSONPath": "gptInputs:inputs"\n	"restPath": "/v1/chat/completions"\n	"restMethod": "POST"\n	"headers": { "Content-Type": "application/json" }\n	"namedCredential": "OpenAI"\n\nNote that you need to have a pre-existing named credential called OpenAI.\n\nNow, create a set vallues called "parseResult". Set the following values in it:\n\n	"responses": "=DESERIALIZE(%callGPT:choices|1:message:content%)"\n\nFinally, create a Response Action with the following parameters:\n\n    "sendJSONPath": "parseResult:responses"\n    "sendJSONNode": "response"\n\n\nSecond, the OmniScript:\n\nThe first element is a Set Values, setting the following:\n\n	  "elementValueMap": {\n		"thePrompt": "You are an experienced life insurance agent.  It is your job to recommend the best policy type for your customer, based upon their needs. \n\nIn addition, for the type of policy you recommend, you should describe it's pluses and minuses in detail and be explicit about how it works. \n\nA customer will tell you what they need in the way of life insurance.   From their needs, you should be able to understand how long they need insurance for, what the purpose is, and whether they are looking for the cheapest insurance or one that is more expensive but with more value. \n\nYour response should be in JSON, and include the following elements:\n\n* policy_type\n* policy_duration\n* purpose\n* pluses, an array of advantages\n* minuses, an array of disadvantages\n* full_text, the complete explanation of all elements of the recommendation"\n	  },\n\nSecond is a step.  The step will have the following elements:\n* a Text Area called 'taNeeds'\n* An intgegration procedure action that calls our integration procedure.  It will have an extra payload that looks like:\n\n		"prompts": {\n		  "gptSystem": "%thePrompt%",\n		  "gptQuestion": "%taNeeds%"\n		}\n\nFinally, two formula fields are put on the step:\n\n* Policy Type, with the formula %response:policy_type%\n* Policy Duration, with the formula %response:policy_duration%\n\nYou can augment the UI with formatting, demo buttons, etc.\n\n
# Q
What are the steps involved in developing a life insurance product recommendation engine using GPT and Salesforce?
# A
You will need to create an Integration Procedure and an OmniScript.\n\nFirst, the integration procedure:\n\nIt will consist of 4 elements.  The first is a set values, the second a HTTP action, the third another set values, and the fourth a response action.\n\nThe first set values prepares the input to GPT.  Call it "gptInputs", and set the name "inputs" to the following JSON structure:\n\n	{\n		"model": "gpt-3.5-turbo",\n		"temperature": 0.2,\n		"max_tokens": 2048,\n		"messages": [\n			{\n				"role": "system",\n				"content": "%prompts:gptSystem%"\n			},\n			{\n				"role": "user",\n				"content": "%prompts:gptQuestion%"\n			}\n		]\n	}\n\nNext, create an HTTP action named "callGPT". Set the following values in it:\n\n	"sendJSONPath": "gptInputs:inputs"\n	"restPath": "/v1/chat/completions"\n	"restMethod": "POST"\n	"headers": { "Content-Type": "application/json" }\n	"namedCredential": "OpenAI"\n\nNote that you need to have a pre-existing named credential called OpenAI.\n\nNow, create a set vallues called "parseResult". Set the following values in it:\n\n	"responses": "=DESERIALIZE(%callGPT:choices|1:message:content%)"\n\nFinally, create a Response Action with the following parameters:\n\n    "sendJSONPath": "parseResult:responses"\n    "sendJSONNode": "response"\n\n\nSecond, the OmniScript:\n\nThe first element is a Set Values, setting the following:\n\n	  "elementValueMap": {\n		"thePrompt": "You are an experienced life insurance agent.  It is your job to recommend the best policy type for your customer, based upon their needs. \n\nIn addition, for the type of policy you recommend, you should describe it's pluses and minuses in detail and be explicit about how it works. \n\nA customer will tell you what they need in the way of life insurance.   From their needs, you should be able to understand how long they need insurance for, what the purpose is, and whether they are looking for the cheapest insurance or one that is more expensive but with more value. \n\nYour response should be in JSON, and include the following elements:\n\n* policy_type\n* policy_duration\n* purpose\n* pluses, an array of advantages\n* minuses, an array of disadvantages\n* full_text, the complete explanation of all elements of the recommendation"\n	  },\n\nSecond is a step.  The step will have the following elements:\n* a Text Area called 'taNeeds'\n* An intgegration procedure action that calls our integration procedure.  It will have an extra payload that looks like:\n\n		"prompts": {\n		  "gptSystem": "%thePrompt%",\n		  "gptQuestion": "%taNeeds%"\n		}\n\nFinally, two formula fields are put on the step:\n\n* Policy Type, with the formula %response:policy_type%\n* Policy Duration, with the formula %response:policy_duration%\n\nYou can augment the UI with formatting, demo buttons, etc.\n\n
# Q
Can you recommend any tutorials or guides for building a product recommendation engine for life insurance using GPT and Salesforce?
# A
You will need to create an Integration Procedure and an OmniScript.\n\nFirst, the integration procedure:\n\nIt will consist of 4 elements.  The first is a set values, the second a HTTP action, the third another set values, and the fourth a response action.\n\nThe first set values prepares the input to GPT.  Call it "gptInputs", and set the name "inputs" to the following JSON structure:\n\n	{\n		"model": "gpt-3.5-turbo",\n		"temperature": 0.2,\n		"max_tokens": 2048,\n		"messages": [\n			{\n				"role": "system",\n				"content": "%prompts:gptSystem%"\n			},\n			{\n				"role": "user",\n				"content": "%prompts:gptQuestion%"\n			}\n		]\n	}\n\nNext, create an HTTP action named "callGPT". Set the following values in it:\n\n	"sendJSONPath": "gptInputs:inputs"\n	"restPath": "/v1/chat/completions"\n	"restMethod": "POST"\n	"headers": { "Content-Type": "application/json" }\n	"namedCredential": "OpenAI"\n\nNote that you need to have a pre-existing named credential called OpenAI.\n\nNow, create a set vallues called "parseResult". Set the following values in it:\n\n	"responses": "=DESERIALIZE(%callGPT:choices|1:message:content%)"\n\nFinally, create a Response Action with the following parameters:\n\n    "sendJSONPath": "parseResult:responses"\n    "sendJSONNode": "response"\n\n\nSecond, the OmniScript:\n\nThe first element is a Set Values, setting the following:\n\n	  "elementValueMap": {\n		"thePrompt": "You are an experienced life insurance agent.  It is your job to recommend the best policy type for your customer, based upon their needs. \n\nIn addition, for the type of policy you recommend, you should describe it's pluses and minuses in detail and be explicit about how it works. \n\nA customer will tell you what they need in the way of life insurance.   From their needs, you should be able to understand how long they need insurance for, what the purpose is, and whether they are looking for the cheapest insurance or one that is more expensive but with more value. \n\nYour response should be in JSON, and include the following elements:\n\n* policy_type\n* policy_duration\n* purpose\n* pluses, an array of advantages\n* minuses, an array of disadvantages\n* full_text, the complete explanation of all elements of the recommendation"\n	  },\n\nSecond is a step.  The step will have the following elements:\n* a Text Area called 'taNeeds'\n* An intgegration procedure action that calls our integration procedure.  It will have an extra payload that looks like:\n\n		"prompts": {\n		  "gptSystem": "%thePrompt%",\n		  "gptQuestion": "%taNeeds%"\n		}\n\nFinally, two formula fields are put on the step:\n\n* Policy Type, with the formula %response:policy_type%\n* Policy Duration, with the formula %response:policy_duration%\n\nYou can augment the UI with formatting, demo buttons, etc.\n\n
# Q
I'm looking for information on how to utilize GPT and Salesforce in order to create a life insurance product recommendation engine. Any advice?
# A
You will need to create an Integration Procedure and an OmniScript.\n\nFirst, the integration procedure:\n\nIt will consist of 4 elements.  The first is a set values, the second a HTTP action, the third another set values, and the fourth a response action.\n\nThe first set values prepares the input to GPT.  Call it "gptInputs", and set the name "inputs" to the following JSON structure:\n\n	{\n		"model": "gpt-3.5-turbo",\n		"temperature": 0.2,\n		"max_tokens": 2048,\n		"messages": [\n			{\n				"role": "system",\n				"content": "%prompts:gptSystem%"\n			},\n			{\n				"role": "user",\n				"content": "%prompts:gptQuestion%"\n			}\n		]\n	}\n\nNext, create an HTTP action named "callGPT". Set the following values in it:\n\n	"sendJSONPath": "gptInputs:inputs"\n	"restPath": "/v1/chat/completions"\n	"restMethod": "POST"\n	"headers": { "Content-Type": "application/json" }\n	"namedCredential": "OpenAI"\n\nNote that you need to have a pre-existing named credential called OpenAI.\n\nNow, create a set vallues called "parseResult". Set the following values in it:\n\n	"responses": "=DESERIALIZE(%callGPT:choices|1:message:content%)"\n\nFinally, create a Response Action with the following parameters:\n\n    "sendJSONPath": "parseResult:responses"\n    "sendJSONNode": "response"\n\n\nSecond, the OmniScript:\n\nThe first element is a Set Values, setting the following:\n\n	  "elementValueMap": {\n		"thePrompt": "You are an experienced life insurance agent.  It is your job to recommend the best policy type for your customer, based upon their needs. \n\nIn addition, for the type of policy you recommend, you should describe it's pluses and minuses in detail and be explicit about how it works. \n\nA customer will tell you what they need in the way of life insurance.   From their needs, you should be able to understand how long they need insurance for, what the purpose is, and whether they are looking for the cheapest insurance or one that is more expensive but with more value. \n\nYour response should be in JSON, and include the following elements:\n\n* policy_type\n* policy_duration\n* purpose\n* pluses, an array of advantages\n* minuses, an array of disadvantages\n* full_text, the complete explanation of all elements of the recommendation"\n	  },\n\nSecond is a step.  The step will have the following elements:\n* a Text Area called 'taNeeds'\n* An intgegration procedure action that calls our integration procedure.  It will have an extra payload that looks like:\n\n		"prompts": {\n		  "gptSystem": "%thePrompt%",\n		  "gptQuestion": "%taNeeds%"\n		}\n\nFinally, two formula fields are put on the step:\n\n* Policy Type, with the formula %response:policy_type%\n* Policy Duration, with the formula %response:policy_duration%\n\nYou can augment the UI with formatting, demo buttons, etc.\n\n
# Q
How do I create a named credential to work with Salesforce and OpenAI?

# A
You need the following:\n\n1. A permission set\n2. An external credential\n\nAssuming you have 1 and 2, then go to Named Credentials in Setup:\n\n* Press the new button\n* Enter “OpenAI” for the name and label.\n* Enter “https://api.openai.com” for the URL.\nPick the name of your external credential for the External Credential.\n* Click the box that says “Allow Formulas in HTTP Header”.\n* Down at the bottom there’s a field called “Allowed Namespaces.” Put in it the name of your installed package we discovered above. If you don’t you get an error message like “The callout couldn't access the endpoint. You might not have the required permissions, or the named credential OpenAI might not exist."\n* Press Save\n\n
# Q
What is the process for creating a named credential to integrate Salesforce and OpenAI?
# A
You need the following:\n\n1. A permission set\n2. An external credential\n\nAssuming you have 1 and 2, then go to Named Credentials in Setup:\n\n* Press the new button\n* Enter “OpenAI” for the name and label.\n* Enter “https://api.openai.com” for the URL.\nPick the name of your external credential for the External Credential.\n* Click the box that says “Allow Formulas in HTTP Header”.\n* Down at the bottom there’s a field called “Allowed Namespaces.” Put in it the name of your installed package we discovered above. If you don’t you get an error message like “The callout couldn't access the endpoint. You might not have the required permissions, or the named credential OpenAI might not exist."\n* Press Save\n\n
# Q
Can you guide me on setting up a named credential for Salesforce and OpenAI integration?
# A
You need the following:\n\n1. A permission set\n2. An external credential\n\nAssuming you have 1 and 2, then go to Named Credentials in Setup:\n\n* Press the new button\n* Enter “OpenAI” for the name and label.\n* Enter “https://api.openai.com” for the URL.\nPick the name of your external credential for the External Credential.\n* Click the box that says “Allow Formulas in HTTP Header”.\n* Down at the bottom there’s a field called “Allowed Namespaces.” Put in it the name of your installed package we discovered above. If you don’t you get an error message like “The callout couldn't access the endpoint. You might not have the required permissions, or the named credential OpenAI might not exist."\n* Press Save\n\n
# Q
I need assistance with creating a named credential for Salesforce and OpenAI. How can I do that?
# A
You need the following:\n\n1. A permission set\n2. An external credential\n\nAssuming you have 1 and 2, then go to Named Credentials in Setup:\n\n* Press the new button\n* Enter “OpenAI” for the name and label.\n* Enter “https://api.openai.com” for the URL.\nPick the name of your external credential for the External Credential.\n* Click the box that says “Allow Formulas in HTTP Header”.\n* Down at the bottom there’s a field called “Allowed Namespaces.” Put in it the name of your installed package we discovered above. If you don’t you get an error message like “The callout couldn't access the endpoint. You might not have the required permissions, or the named credential OpenAI might not exist."\n* Press Save\n\n
# Q
Please provide step-by-step instructions on how to create a named credential for Salesforce and OpenAI.
# A
You need the following:\n\n1. A permission set\n2. An external credential\n\nAssuming you have 1 and 2, then go to Named Credentials in Setup:\n\n* Press the new button\n* Enter “OpenAI” for the name and label.\n* Enter “https://api.openai.com” for the URL.\nPick the name of your external credential for the External Credential.\n* Click the box that says “Allow Formulas in HTTP Header”.\n* Down at the bottom there’s a field called “Allowed Namespaces.” Put in it the name of your installed package we discovered above. If you don’t you get an error message like “The callout couldn't access the endpoint. You might not have the required permissions, or the named credential OpenAI might not exist."\n* Press Save\n\n
# Q
Is there a specific way to create a named credential for Salesforce and OpenAI?
# A
You need the following:\n\n1. A permission set\n2. An external credential\n\nAssuming you have 1 and 2, then go to Named Credentials in Setup:\n\n* Press the new button\n* Enter “OpenAI” for the name and label.\n* Enter “https://api.openai.com” for the URL.\nPick the name of your external credential for the External Credential.\n* Click the box that says “Allow Formulas in HTTP Header”.\n* Down at the bottom there’s a field called “Allowed Namespaces.” Put in it the name of your installed package we discovered above. If you don’t you get an error message like “The callout couldn't access the endpoint. You might not have the required permissions, or the named credential OpenAI might not exist."\n* Press Save\n\n
# Q
I'm looking for information on how to set up a named credential for Salesforce and OpenAI. Can you help?
# A
You need the following:\n\n1. A permission set\n2. An external credential\n\nAssuming you have 1 and 2, then go to Named Credentials in Setup:\n\n* Press the new button\n* Enter “OpenAI” for the name and label.\n* Enter “https://api.openai.com” for the URL.\nPick the name of your external credential for the External Credential.\n* Click the box that says “Allow Formulas in HTTP Header”.\n* Down at the bottom there’s a field called “Allowed Namespaces.” Put in it the name of your installed package we discovered above. If you don’t you get an error message like “The callout couldn't access the endpoint. You might not have the required permissions, or the named credential OpenAI might not exist."\n* Press Save\n\n
# Q
Could you explain the steps involved in creating a named credential for Salesforce and OpenAI?
# A
You need the following:\n\n1. A permission set\n2. An external credential\n\nAssuming you have 1 and 2, then go to Named Credentials in Setup:\n\n* Press the new button\n* Enter “OpenAI” for the name and label.\n* Enter “https://api.openai.com” for the URL.\nPick the name of your external credential for the External Credential.\n* Click the box that says “Allow Formulas in HTTP Header”.\n* Down at the bottom there’s a field called “Allowed Namespaces.” Put in it the name of your installed package we discovered above. If you don’t you get an error message like “The callout couldn't access the endpoint. You might not have the required permissions, or the named credential OpenAI might not exist."\n* Press Save\n\n
# Q
What are the requirements for creating a named credential to work with Salesforce and OpenAI?
# A
You need the following:\n\n1. A permission set\n2. An external credential\n\nAssuming you have 1 and 2, then go to Named Credentials in Setup:\n\n* Press the new button\n* Enter “OpenAI” for the name and label.\n* Enter “https://api.openai.com” for the URL.\nPick the name of your external credential for the External Credential.\n* Click the box that says “Allow Formulas in HTTP Header”.\n* Down at the bottom there’s a field called “Allowed Namespaces.” Put in it the name of your installed package we discovered above. If you don’t you get an error message like “The callout couldn't access the endpoint. You might not have the required permissions, or the named credential OpenAI might not exist."\n* Press Save\n\n
# Q
I'm not sure how to create a named credential for Salesforce and OpenAI. Can you give me some guidance?
# A
You need the following:\n\n1. A permission set\n2. An external credential\n\nAssuming you have 1 and 2, then go to Named Credentials in Setup:\n\n* Press the new button\n* Enter “OpenAI” for the name and label.\n* Enter “https://api.openai.com” for the URL.\nPick the name of your external credential for the External Credential.\n* Click the box that says “Allow Formulas in HTTP Header”.\n* Down at the bottom there’s a field called “Allowed Namespaces.” Put in it the name of your installed package we discovered above. If you don’t you get an error message like “The callout couldn't access the endpoint. You might not have the required permissions, or the named credential OpenAI might not exist."\n* Press Save\n\n
# Q
Are there any best practices for creating a named credential to integrate Salesforce and OpenAI?
# A
You need the following:\n\n1. A permission set\n2. An external credential\n\nAssuming you have 1 and 2, then go to Named Credentials in Setup:\n\n* Press the new button\n* Enter “OpenAI” for the name and label.\n* Enter “https://api.openai.com” for the URL.\nPick the name of your external credential for the External Credential.\n* Click the box that says “Allow Formulas in HTTP Header”.\n* Down at the bottom there’s a field called “Allowed Namespaces.” Put in it the name of your installed package we discovered above. If you don’t you get an error message like “The callout couldn't access the endpoint. You might not have the required permissions, or the named credential OpenAI might not exist."\n* Press Save\n\n
# Q
How do I create an external credential?

# A
You need the following:\n\n1. A permission set\n\nTo create the external credential, do the following:\n\nIn set up, go to the External Credentials screen and then press the New button.\n\n* Enter OpenAIec (that’s a capital i not an el) for both the name and label. Pick an authentication protocol of Custom\n* Press Save.\n* Click on the New button in Principals\n* For Parameter Name, enter OpenAI\n* Click add for the Authentication Parameters, and give it a name of “OpenAIKey” with a value of your secret key from OpenAI (the one that starts with sk-…):\n* Press Save\n* Now, click New for Custom Headers, and enter:\n* “Authorization” for Name\n* “Bearer {!$Credential.OpenAIec.OpenAIKey}” for Value\n* Press Save\n* Go back to your permission set created above\n* Click the link “External Credential Principal Access”\n* Press Edit\n* Add in “OpenAIec - OpenAI” and save.\n\nYou now have created an external credential.\n\n
# Q
What is the process for creating an external credential?
# A
You need the following:\n\n1. A permission set\n\nTo create the external credential, do the following:\n\nIn set up, go to the External Credentials screen and then press the New button.\n\n* Enter OpenAIec (that’s a capital i not an el) for both the name and label. Pick an authentication protocol of Custom\n* Press Save.\n* Click on the New button in Principals\n* For Parameter Name, enter OpenAI\n* Click add for the Authentication Parameters, and give it a name of “OpenAIKey” with a value of your secret key from OpenAI (the one that starts with sk-…):\n* Press Save\n* Now, click New for Custom Headers, and enter:\n* “Authorization” for Name\n* “Bearer {!$Credential.OpenAIec.OpenAIKey}” for Value\n* Press Save\n* Go back to your permission set created above\n* Click the link “External Credential Principal Access”\n* Press Edit\n* Add in “OpenAIec - OpenAI” and save.\n\nYou now have created an external credential.\n\n
# Q
Can you guide me on how to create an external credential?
# A
You need the following:\n\n1. A permission set\n\nTo create the external credential, do the following:\n\nIn set up, go to the External Credentials screen and then press the New button.\n\n* Enter OpenAIec (that’s a capital i not an el) for both the name and label. Pick an authentication protocol of Custom\n* Press Save.\n* Click on the New button in Principals\n* For Parameter Name, enter OpenAI\n* Click add for the Authentication Parameters, and give it a name of “OpenAIKey” with a value of your secret key from OpenAI (the one that starts with sk-…):\n* Press Save\n* Now, click New for Custom Headers, and enter:\n* “Authorization” for Name\n* “Bearer {!$Credential.OpenAIec.OpenAIKey}” for Value\n* Press Save\n* Go back to your permission set created above\n* Click the link “External Credential Principal Access”\n* Press Edit\n* Add in “OpenAIec - OpenAI” and save.\n\nYou now have created an external credential.\n\n
# Q
I would like to know the steps to create an external credential.
# A
You need the following:\n\n1. A permission set\n\nTo create the external credential, do the following:\n\nIn set up, go to the External Credentials screen and then press the New button.\n\n* Enter OpenAIec (that’s a capital i not an el) for both the name and label. Pick an authentication protocol of Custom\n* Press Save.\n* Click on the New button in Principals\n* For Parameter Name, enter OpenAI\n* Click add for the Authentication Parameters, and give it a name of “OpenAIKey” with a value of your secret key from OpenAI (the one that starts with sk-…):\n* Press Save\n* Now, click New for Custom Headers, and enter:\n* “Authorization” for Name\n* “Bearer {!$Credential.OpenAIec.OpenAIKey}” for Value\n* Press Save\n* Go back to your permission set created above\n* Click the link “External Credential Principal Access”\n* Press Edit\n* Add in “OpenAIec - OpenAI” and save.\n\nYou now have created an external credential.\n\n
# Q
Is there a way to generate an external credential?
# A
You need the following:\n\n1. A permission set\n\nTo create the external credential, do the following:\n\nIn set up, go to the External Credentials screen and then press the New button.\n\n* Enter OpenAIec (that’s a capital i not an el) for both the name and label. Pick an authentication protocol of Custom\n* Press Save.\n* Click on the New button in Principals\n* For Parameter Name, enter OpenAI\n* Click add for the Authentication Parameters, and give it a name of “OpenAIKey” with a value of your secret key from OpenAI (the one that starts with sk-…):\n* Press Save\n* Now, click New for Custom Headers, and enter:\n* “Authorization” for Name\n* “Bearer {!$Credential.OpenAIec.OpenAIKey}” for Value\n* Press Save\n* Go back to your permission set created above\n* Click the link “External Credential Principal Access”\n* Press Edit\n* Add in “OpenAIec - OpenAI” and save.\n\nYou now have created an external credential.\n\n
# Q
Please explain how I can create an external credential.
# A
You need the following:\n\n1. A permission set\n\nTo create the external credential, do the following:\n\nIn set up, go to the External Credentials screen and then press the New button.\n\n* Enter OpenAIec (that’s a capital i not an el) for both the name and label. Pick an authentication protocol of Custom\n* Press Save.\n* Click on the New button in Principals\n* For Parameter Name, enter OpenAI\n* Click add for the Authentication Parameters, and give it a name of “OpenAIKey” with a value of your secret key from OpenAI (the one that starts with sk-…):\n* Press Save\n* Now, click New for Custom Headers, and enter:\n* “Authorization” for Name\n* “Bearer {!$Credential.OpenAIec.OpenAIKey}” for Value\n* Press Save\n* Go back to your permission set created above\n* Click the link “External Credential Principal Access”\n* Press Edit\n* Add in “OpenAIec - OpenAI” and save.\n\nYou now have created an external credential.\n\n
# Q
Could you provide instructions on creating an external credential?
# A
You need the following:\n\n1. A permission set\n\nTo create the external credential, do the following:\n\nIn set up, go to the External Credentials screen and then press the New button.\n\n* Enter OpenAIec (that’s a capital i not an el) for both the name and label. Pick an authentication protocol of Custom\n* Press Save.\n* Click on the New button in Principals\n* For Parameter Name, enter OpenAI\n* Click add for the Authentication Parameters, and give it a name of “OpenAIKey” with a value of your secret key from OpenAI (the one that starts with sk-…):\n* Press Save\n* Now, click New for Custom Headers, and enter:\n* “Authorization” for Name\n* “Bearer {!$Credential.OpenAIec.OpenAIKey}” for Value\n* Press Save\n* Go back to your permission set created above\n* Click the link “External Credential Principal Access”\n* Press Edit\n* Add in “OpenAIec - OpenAI” and save.\n\nYou now have created an external credential.\n\n
# Q
What are the requirements for creating an external credential?
# A
You need the following:\n\n1. A permission set\n\nTo create the external credential, do the following:\n\nIn set up, go to the External Credentials screen and then press the New button.\n\n* Enter OpenAIec (that’s a capital i not an el) for both the name and label. Pick an authentication protocol of Custom\n* Press Save.\n* Click on the New button in Principals\n* For Parameter Name, enter OpenAI\n* Click add for the Authentication Parameters, and give it a name of “OpenAIKey” with a value of your secret key from OpenAI (the one that starts with sk-…):\n* Press Save\n* Now, click New for Custom Headers, and enter:\n* “Authorization” for Name\n* “Bearer {!$Credential.OpenAIec.OpenAIKey}” for Value\n* Press Save\n* Go back to your permission set created above\n* Click the link “External Credential Principal Access”\n* Press Edit\n* Add in “OpenAIec - OpenAI” and save.\n\nYou now have created an external credential.\n\n
# Q
Are there any specific guidelines for creating an external credential?
# A
You need the following:\n\n1. A permission set\n\nTo create the external credential, do the following:\n\nIn set up, go to the External Credentials screen and then press the New button.\n\n* Enter OpenAIec (that’s a capital i not an el) for both the name and label. Pick an authentication protocol of Custom\n* Press Save.\n* Click on the New button in Principals\n* For Parameter Name, enter OpenAI\n* Click add for the Authentication Parameters, and give it a name of “OpenAIKey” with a value of your secret key from OpenAI (the one that starts with sk-…):\n* Press Save\n* Now, click New for Custom Headers, and enter:\n* “Authorization” for Name\n* “Bearer {!$Credential.OpenAIec.OpenAIKey}” for Value\n* Press Save\n* Go back to your permission set created above\n* Click the link “External Credential Principal Access”\n* Press Edit\n* Add in “OpenAIec - OpenAI” and save.\n\nYou now have created an external credential.\n\n
# Q
Can you assist me in creating an external credential?
# A
You need the following:\n\n1. A permission set\n\nTo create the external credential, do the following:\n\nIn set up, go to the External Credentials screen and then press the New button.\n\n* Enter OpenAIec (that’s a capital i not an el) for both the name and label. Pick an authentication protocol of Custom\n* Press Save.\n* Click on the New button in Principals\n* For Parameter Name, enter OpenAI\n* Click add for the Authentication Parameters, and give it a name of “OpenAIKey” with a value of your secret key from OpenAI (the one that starts with sk-…):\n* Press Save\n* Now, click New for Custom Headers, and enter:\n* “Authorization” for Name\n* “Bearer {!$Credential.OpenAIec.OpenAIKey}” for Value\n* Press Save\n* Go back to your permission set created above\n* Click the link “External Credential Principal Access”\n* Press Edit\n* Add in “OpenAIec - OpenAI” and save.\n\nYou now have created an external credential.\n\n
# Q
I'm interested in learning how to create an external credential.
# A
You need the following:\n\n1. A permission set\n\nTo create the external credential, do the following:\n\nIn set up, go to the External Credentials screen and then press the New button.\n\n* Enter OpenAIec (that’s a capital i not an el) for both the name and label. Pick an authentication protocol of Custom\n* Press Save.\n* Click on the New button in Principals\n* For Parameter Name, enter OpenAI\n* Click add for the Authentication Parameters, and give it a name of “OpenAIKey” with a value of your secret key from OpenAI (the one that starts with sk-…):\n* Press Save\n* Now, click New for Custom Headers, and enter:\n* “Authorization” for Name\n* “Bearer {!$Credential.OpenAIec.OpenAIKey}” for Value\n* Press Save\n* Go back to your permission set created above\n* Click the link “External Credential Principal Access”\n* Press Edit\n* Add in “OpenAIec - OpenAI” and save.\n\nYou now have created an external credential.\n\n
# Q
How do I create a permission set?

# A
Go into Setup and:\n\n* Search for Permission\n* Select Permission Sets\n* Press New\n* Enter OpenAIApi into the label, hit tab, and it’s copied to API Name.\n* Enter anything you wish for the description.\n* Hit Save\n* On the page for your new permission set, press “Manage Assignments”\n* On the next page click “Add Assignment”\n* On the Select Users to Assign page, select all the users you wish to have OpenAI API access. Especially yourself.\n* Press Next\n* On the next page, press Assign.\n* Press Done … and you’re done!\n\n
# Q
What is the process for creating a permission set?
# A
Go into Setup and:\n\n* Search for Permission\n* Select Permission Sets\n* Press New\n* Enter OpenAIApi into the label, hit tab, and it’s copied to API Name.\n* Enter anything you wish for the description.\n* Hit Save\n* On the page for your new permission set, press “Manage Assignments”\n* On the next page click “Add Assignment”\n* On the Select Users to Assign page, select all the users you wish to have OpenAI API access. Especially yourself.\n* Press Next\n* On the next page, press Assign.\n* Press Done … and you’re done!\n\n
# Q
Can you guide me on how to create a permission set?
# A
Go into Setup and:\n\n* Search for Permission\n* Select Permission Sets\n* Press New\n* Enter OpenAIApi into the label, hit tab, and it’s copied to API Name.\n* Enter anything you wish for the description.\n* Hit Save\n* On the page for your new permission set, press “Manage Assignments”\n* On the next page click “Add Assignment”\n* On the Select Users to Assign page, select all the users you wish to have OpenAI API access. Especially yourself.\n* Press Next\n* On the next page, press Assign.\n* Press Done … and you’re done!\n\n
# Q
I need help with creating a permission set. What should I do?
# A
Go into Setup and:\n\n* Search for Permission\n* Select Permission Sets\n* Press New\n* Enter OpenAIApi into the label, hit tab, and it’s copied to API Name.\n* Enter anything you wish for the description.\n* Hit Save\n* On the page for your new permission set, press “Manage Assignments”\n* On the next page click “Add Assignment”\n* On the Select Users to Assign page, select all the users you wish to have OpenAI API access. Especially yourself.\n* Press Next\n* On the next page, press Assign.\n* Press Done … and you’re done!\n\n
# Q
Is there a step-by-step guide for creating a permission set?
# A
Go into Setup and:\n\n* Search for Permission\n* Select Permission Sets\n* Press New\n* Enter OpenAIApi into the label, hit tab, and it’s copied to API Name.\n* Enter anything you wish for the description.\n* Hit Save\n* On the page for your new permission set, press “Manage Assignments”\n* On the next page click “Add Assignment”\n* On the Select Users to Assign page, select all the users you wish to have OpenAI API access. Especially yourself.\n* Press Next\n* On the next page, press Assign.\n* Press Done … and you’re done!\n\n
# Q
Could you please explain how to create a permission set?
# A
Go into Setup and:\n\n* Search for Permission\n* Select Permission Sets\n* Press New\n* Enter OpenAIApi into the label, hit tab, and it’s copied to API Name.\n* Enter anything you wish for the description.\n* Hit Save\n* On the page for your new permission set, press “Manage Assignments”\n* On the next page click “Add Assignment”\n* On the Select Users to Assign page, select all the users you wish to have OpenAI API access. Especially yourself.\n* Press Next\n* On the next page, press Assign.\n* Press Done … and you’re done!\n\n
# Q
I'm looking for instructions on how to create a permission set.
# A
Go into Setup and:\n\n* Search for Permission\n* Select Permission Sets\n* Press New\n* Enter OpenAIApi into the label, hit tab, and it’s copied to API Name.\n* Enter anything you wish for the description.\n* Hit Save\n* On the page for your new permission set, press “Manage Assignments”\n* On the next page click “Add Assignment”\n* On the Select Users to Assign page, select all the users you wish to have OpenAI API access. Especially yourself.\n* Press Next\n* On the next page, press Assign.\n* Press Done … and you’re done!\n\n
# Q
Can you provide me with the steps to create a permission set?
# A
Go into Setup and:\n\n* Search for Permission\n* Select Permission Sets\n* Press New\n* Enter OpenAIApi into the label, hit tab, and it’s copied to API Name.\n* Enter anything you wish for the description.\n* Hit Save\n* On the page for your new permission set, press “Manage Assignments”\n* On the next page click “Add Assignment”\n* On the Select Users to Assign page, select all the users you wish to have OpenAI API access. Especially yourself.\n* Press Next\n* On the next page, press Assign.\n* Press Done … and you’re done!\n\n
# Q
What are the necessary steps to create a permission set?
# A
Go into Setup and:\n\n* Search for Permission\n* Select Permission Sets\n* Press New\n* Enter OpenAIApi into the label, hit tab, and it’s copied to API Name.\n* Enter anything you wish for the description.\n* Hit Save\n* On the page for your new permission set, press “Manage Assignments”\n* On the next page click “Add Assignment”\n* On the Select Users to Assign page, select all the users you wish to have OpenAI API access. Especially yourself.\n* Press Next\n* On the next page, press Assign.\n* Press Done … and you’re done!\n\n
# Q
Do you have any tips for creating a permission set?
# A
Go into Setup and:\n\n* Search for Permission\n* Select Permission Sets\n* Press New\n* Enter OpenAIApi into the label, hit tab, and it’s copied to API Name.\n* Enter anything you wish for the description.\n* Hit Save\n* On the page for your new permission set, press “Manage Assignments”\n* On the next page click “Add Assignment”\n* On the Select Users to Assign page, select all the users you wish to have OpenAI API access. Especially yourself.\n* Press Next\n* On the next page, press Assign.\n* Press Done … and you’re done!\n\n
# Q
Could you walk me through the process of creating a permission set?
# A
Go into Setup and:\n\n* Search for Permission\n* Select Permission Sets\n* Press New\n* Enter OpenAIApi into the label, hit tab, and it’s copied to API Name.\n* Enter anything you wish for the description.\n* Hit Save\n* On the page for your new permission set, press “Manage Assignments”\n* On the next page click “Add Assignment”\n* On the Select Users to Assign page, select all the users you wish to have OpenAI API access. Especially yourself.\n* Press Next\n* On the next page, press Assign.\n* Press Done … and you’re done!\n\n
# Q
What is Retrieval Augmented Generation?

# A
Let us say that you wish to create a chatbot that can answer questions about recipes. Not recipes in general, but very specific recipes. Perhaps you’ve published a cookbook, and you’d like to help your readers out1. You don’t want GPT guessing about how to cook your recipes, you want it to know. But your recipes change all the time because of updates, new additions, and recipes that become obsolescent (that ancient aspic recipe isn’t getting a lot of love lately). You don’t want to train or fine tune an LLM today that will be out of date tomorrow2.\n\nInstead, you’re decide to use a technique called Retrieval Augmented Generation (RAG)3. Here’s how it works.\n\nFirst, the user types in their question. Next, you look, quickly, through all your recipes to see which ones may be relevant. Then, you feed those recipes and the user’s question together to GPT. Since GPT has the complete documentation for relevant recipe(s), it can answer the question appropriately4.\n\nAs always, this is a bit of a simplification, but not that much! And the code to do this is pretty easy, especially since the newsletter has already covered calling GPT and working with embeddings!\n\n
# Q
What does Retrieval Augmented Generation mean?
# A
Let us say that you wish to create a chatbot that can answer questions about recipes. Not recipes in general, but very specific recipes. Perhaps you’ve published a cookbook, and you’d like to help your readers out1. You don’t want GPT guessing about how to cook your recipes, you want it to know. But your recipes change all the time because of updates, new additions, and recipes that become obsolescent (that ancient aspic recipe isn’t getting a lot of love lately). You don’t want to train or fine tune an LLM today that will be out of date tomorrow2.\n\nInstead, you’re decide to use a technique called Retrieval Augmented Generation (RAG)3. Here’s how it works.\n\nFirst, the user types in their question. Next, you look, quickly, through all your recipes to see which ones may be relevant. Then, you feed those recipes and the user’s question together to GPT. Since GPT has the complete documentation for relevant recipe(s), it can answer the question appropriately4.\n\nAs always, this is a bit of a simplification, but not that much! And the code to do this is pretty easy, especially since the newsletter has already covered calling GPT and working with embeddings!\n\n
# Q
Can you explain Retrieval Augmented Generation?
# A
Let us say that you wish to create a chatbot that can answer questions about recipes. Not recipes in general, but very specific recipes. Perhaps you’ve published a cookbook, and you’d like to help your readers out1. You don’t want GPT guessing about how to cook your recipes, you want it to know. But your recipes change all the time because of updates, new additions, and recipes that become obsolescent (that ancient aspic recipe isn’t getting a lot of love lately). You don’t want to train or fine tune an LLM today that will be out of date tomorrow2.\n\nInstead, you’re decide to use a technique called Retrieval Augmented Generation (RAG)3. Here’s how it works.\n\nFirst, the user types in their question. Next, you look, quickly, through all your recipes to see which ones may be relevant. Then, you feed those recipes and the user’s question together to GPT. Since GPT has the complete documentation for relevant recipe(s), it can answer the question appropriately4.\n\nAs always, this is a bit of a simplification, but not that much! And the code to do this is pretty easy, especially since the newsletter has already covered calling GPT and working with embeddings!\n\n
# Q
Tell me about Retrieval Augmented Generation.
# A
Let us say that you wish to create a chatbot that can answer questions about recipes. Not recipes in general, but very specific recipes. Perhaps you’ve published a cookbook, and you’d like to help your readers out1. You don’t want GPT guessing about how to cook your recipes, you want it to know. But your recipes change all the time because of updates, new additions, and recipes that become obsolescent (that ancient aspic recipe isn’t getting a lot of love lately). You don’t want to train or fine tune an LLM today that will be out of date tomorrow2.\n\nInstead, you’re decide to use a technique called Retrieval Augmented Generation (RAG)3. Here’s how it works.\n\nFirst, the user types in their question. Next, you look, quickly, through all your recipes to see which ones may be relevant. Then, you feed those recipes and the user’s question together to GPT. Since GPT has the complete documentation for relevant recipe(s), it can answer the question appropriately4.\n\nAs always, this is a bit of a simplification, but not that much! And the code to do this is pretty easy, especially since the newsletter has already covered calling GPT and working with embeddings!\n\n
# Q
I would like to know more about Retrieval Augmented Generation.
# A
Let us say that you wish to create a chatbot that can answer questions about recipes. Not recipes in general, but very specific recipes. Perhaps you’ve published a cookbook, and you’d like to help your readers out1. You don’t want GPT guessing about how to cook your recipes, you want it to know. But your recipes change all the time because of updates, new additions, and recipes that become obsolescent (that ancient aspic recipe isn’t getting a lot of love lately). You don’t want to train or fine tune an LLM today that will be out of date tomorrow2.\n\nInstead, you’re decide to use a technique called Retrieval Augmented Generation (RAG)3. Here’s how it works.\n\nFirst, the user types in their question. Next, you look, quickly, through all your recipes to see which ones may be relevant. Then, you feed those recipes and the user’s question together to GPT. Since GPT has the complete documentation for relevant recipe(s), it can answer the question appropriately4.\n\nAs always, this is a bit of a simplification, but not that much! And the code to do this is pretty easy, especially since the newsletter has already covered calling GPT and working with embeddings!\n\n
# Q
What are the key concepts of Retrieval Augmented Generation?
# A
Let us say that you wish to create a chatbot that can answer questions about recipes. Not recipes in general, but very specific recipes. Perhaps you’ve published a cookbook, and you’d like to help your readers out1. You don’t want GPT guessing about how to cook your recipes, you want it to know. But your recipes change all the time because of updates, new additions, and recipes that become obsolescent (that ancient aspic recipe isn’t getting a lot of love lately). You don’t want to train or fine tune an LLM today that will be out of date tomorrow2.\n\nInstead, you’re decide to use a technique called Retrieval Augmented Generation (RAG)3. Here’s how it works.\n\nFirst, the user types in their question. Next, you look, quickly, through all your recipes to see which ones may be relevant. Then, you feed those recipes and the user’s question together to GPT. Since GPT has the complete documentation for relevant recipe(s), it can answer the question appropriately4.\n\nAs always, this is a bit of a simplification, but not that much! And the code to do this is pretty easy, especially since the newsletter has already covered calling GPT and working with embeddings!\n\n
# Q
Could you provide an overview of Retrieval Augmented Generation?
# A
Let us say that you wish to create a chatbot that can answer questions about recipes. Not recipes in general, but very specific recipes. Perhaps you’ve published a cookbook, and you’d like to help your readers out1. You don’t want GPT guessing about how to cook your recipes, you want it to know. But your recipes change all the time because of updates, new additions, and recipes that become obsolescent (that ancient aspic recipe isn’t getting a lot of love lately). You don’t want to train or fine tune an LLM today that will be out of date tomorrow2.\n\nInstead, you’re decide to use a technique called Retrieval Augmented Generation (RAG)3. Here’s how it works.\n\nFirst, the user types in their question. Next, you look, quickly, through all your recipes to see which ones may be relevant. Then, you feed those recipes and the user’s question together to GPT. Since GPT has the complete documentation for relevant recipe(s), it can answer the question appropriately4.\n\nAs always, this is a bit of a simplification, but not that much! And the code to do this is pretty easy, especially since the newsletter has already covered calling GPT and working with embeddings!\n\n
# Q
What is the significance of Retrieval Augmented Generation?
# A
Let us say that you wish to create a chatbot that can answer questions about recipes. Not recipes in general, but very specific recipes. Perhaps you’ve published a cookbook, and you’d like to help your readers out1. You don’t want GPT guessing about how to cook your recipes, you want it to know. But your recipes change all the time because of updates, new additions, and recipes that become obsolescent (that ancient aspic recipe isn’t getting a lot of love lately). You don’t want to train or fine tune an LLM today that will be out of date tomorrow2.\n\nInstead, you’re decide to use a technique called Retrieval Augmented Generation (RAG)3. Here’s how it works.\n\nFirst, the user types in their question. Next, you look, quickly, through all your recipes to see which ones may be relevant. Then, you feed those recipes and the user’s question together to GPT. Since GPT has the complete documentation for relevant recipe(s), it can answer the question appropriately4.\n\nAs always, this is a bit of a simplification, but not that much! And the code to do this is pretty easy, especially since the newsletter has already covered calling GPT and working with embeddings!\n\n
# Q
How does Retrieval Augmented Generation work?
# A
Let us say that you wish to create a chatbot that can answer questions about recipes. Not recipes in general, but very specific recipes. Perhaps you’ve published a cookbook, and you’d like to help your readers out1. You don’t want GPT guessing about how to cook your recipes, you want it to know. But your recipes change all the time because of updates, new additions, and recipes that become obsolescent (that ancient aspic recipe isn’t getting a lot of love lately). You don’t want to train or fine tune an LLM today that will be out of date tomorrow2.\n\nInstead, you’re decide to use a technique called Retrieval Augmented Generation (RAG)3. Here’s how it works.\n\nFirst, the user types in their question. Next, you look, quickly, through all your recipes to see which ones may be relevant. Then, you feed those recipes and the user’s question together to GPT. Since GPT has the complete documentation for relevant recipe(s), it can answer the question appropriately4.\n\nAs always, this is a bit of a simplification, but not that much! And the code to do this is pretty easy, especially since the newsletter has already covered calling GPT and working with embeddings!\n\n
# Q
What are the benefits of Retrieval Augmented Generation?
# A
Let us say that you wish to create a chatbot that can answer questions about recipes. Not recipes in general, but very specific recipes. Perhaps you’ve published a cookbook, and you’d like to help your readers out1. You don’t want GPT guessing about how to cook your recipes, you want it to know. But your recipes change all the time because of updates, new additions, and recipes that become obsolescent (that ancient aspic recipe isn’t getting a lot of love lately). You don’t want to train or fine tune an LLM today that will be out of date tomorrow2.\n\nInstead, you’re decide to use a technique called Retrieval Augmented Generation (RAG)3. Here’s how it works.\n\nFirst, the user types in their question. Next, you look, quickly, through all your recipes to see which ones may be relevant. Then, you feed those recipes and the user’s question together to GPT. Since GPT has the complete documentation for relevant recipe(s), it can answer the question appropriately4.\n\nAs always, this is a bit of a simplification, but not that much! And the code to do this is pretty easy, especially since the newsletter has already covered calling GPT and working with embeddings!\n\n
# Q
Are there any applications of Retrieval Augmented Generation?
# A
Let us say that you wish to create a chatbot that can answer questions about recipes. Not recipes in general, but very specific recipes. Perhaps you’ve published a cookbook, and you’d like to help your readers out1. You don’t want GPT guessing about how to cook your recipes, you want it to know. But your recipes change all the time because of updates, new additions, and recipes that become obsolescent (that ancient aspic recipe isn’t getting a lot of love lately). You don’t want to train or fine tune an LLM today that will be out of date tomorrow2.\n\nInstead, you’re decide to use a technique called Retrieval Augmented Generation (RAG)3. Here’s how it works.\n\nFirst, the user types in their question. Next, you look, quickly, through all your recipes to see which ones may be relevant. Then, you feed those recipes and the user’s question together to GPT. Since GPT has the complete documentation for relevant recipe(s), it can answer the question appropriately4.\n\nAs always, this is a bit of a simplification, but not that much! And the code to do this is pretty easy, especially since the newsletter has already covered calling GPT and working with embeddings!\n\n
# Q
How do I build a "retrieval augmented generation" application?

# A
You need to follow these steps:\n\n1. Find all the documents you want to use in your application.  The documents can be things like documentation, notes, articles, reference material, etc.\n2. Break them up into reasonably sized chunks if they are very large.\n3. Compute the embeddings for each document, and store in a database like Pinecone\n4. When the user asks a question, compute the embedding for it.\n5. Find the most similar documents in your database using embeddings and cosine similarity.\n6. Include the most relevant documents (up to a size limit) in a GPT call along with the user's question.\n7. Display the results.\n\n
# Q
What are the steps to create a retrieval augmented generation application?
# A
You need to follow these steps:\n\n1. Find all the documents you want to use in your application.  The documents can be things like documentation, notes, articles, reference material, etc.\n2. Break them up into reasonably sized chunks if they are very large.\n3. Compute the embeddings for each document, and store in a database like Pinecone\n4. When the user asks a question, compute the embedding for it.\n5. Find the most similar documents in your database using embeddings and cosine similarity.\n6. Include the most relevant documents (up to a size limit) in a GPT call along with the user's question.\n7. Display the results.\n\n
# Q
Can you guide me on building a retrieval augmented generation application?
# A
You need to follow these steps:\n\n1. Find all the documents you want to use in your application.  The documents can be things like documentation, notes, articles, reference material, etc.\n2. Break them up into reasonably sized chunks if they are very large.\n3. Compute the embeddings for each document, and store in a database like Pinecone\n4. When the user asks a question, compute the embedding for it.\n5. Find the most similar documents in your database using embeddings and cosine similarity.\n6. Include the most relevant documents (up to a size limit) in a GPT call along with the user's question.\n7. Display the results.\n\n
# Q
I'm interested in developing a retrieval augmented generation application. How should I start?
# A
You need to follow these steps:\n\n1. Find all the documents you want to use in your application.  The documents can be things like documentation, notes, articles, reference material, etc.\n2. Break them up into reasonably sized chunks if they are very large.\n3. Compute the embeddings for each document, and store in a database like Pinecone\n4. When the user asks a question, compute the embedding for it.\n5. Find the most similar documents in your database using embeddings and cosine similarity.\n6. Include the most relevant documents (up to a size limit) in a GPT call along with the user's question.\n7. Display the results.\n\n
# Q
What is the process of building a retrieval augmented generation application?
# A
You need to follow these steps:\n\n1. Find all the documents you want to use in your application.  The documents can be things like documentation, notes, articles, reference material, etc.\n2. Break them up into reasonably sized chunks if they are very large.\n3. Compute the embeddings for each document, and store in a database like Pinecone\n4. When the user asks a question, compute the embedding for it.\n5. Find the most similar documents in your database using embeddings and cosine similarity.\n6. Include the most relevant documents (up to a size limit) in a GPT call along with the user's question.\n7. Display the results.\n\n
# Q
Could you provide some insights on creating a retrieval augmented generation application?
# A
You need to follow these steps:\n\n1. Find all the documents you want to use in your application.  The documents can be things like documentation, notes, articles, reference material, etc.\n2. Break them up into reasonably sized chunks if they are very large.\n3. Compute the embeddings for each document, and store in a database like Pinecone\n4. When the user asks a question, compute the embedding for it.\n5. Find the most similar documents in your database using embeddings and cosine similarity.\n6. Include the most relevant documents (up to a size limit) in a GPT call along with the user's question.\n7. Display the results.\n\n
# Q
I want to create a retrieval augmented generation application. What are the necessary steps?
# A
You need to follow these steps:\n\n1. Find all the documents you want to use in your application.  The documents can be things like documentation, notes, articles, reference material, etc.\n2. Break them up into reasonably sized chunks if they are very large.\n3. Compute the embeddings for each document, and store in a database like Pinecone\n4. When the user asks a question, compute the embedding for it.\n5. Find the most similar documents in your database using embeddings and cosine similarity.\n6. Include the most relevant documents (up to a size limit) in a GPT call along with the user's question.\n7. Display the results.\n\n
# Q
Can you explain the procedure for building a retrieval augmented generation application?
# A
You need to follow these steps:\n\n1. Find all the documents you want to use in your application.  The documents can be things like documentation, notes, articles, reference material, etc.\n2. Break them up into reasonably sized chunks if they are very large.\n3. Compute the embeddings for each document, and store in a database like Pinecone\n4. When the user asks a question, compute the embedding for it.\n5. Find the most similar documents in your database using embeddings and cosine similarity.\n6. Include the most relevant documents (up to a size limit) in a GPT call along with the user's question.\n7. Display the results.\n\n
# Q
What are the requirements for developing a retrieval augmented generation application?
# A
You need to follow these steps:\n\n1. Find all the documents you want to use in your application.  The documents can be things like documentation, notes, articles, reference material, etc.\n2. Break them up into reasonably sized chunks if they are very large.\n3. Compute the embeddings for each document, and store in a database like Pinecone\n4. When the user asks a question, compute the embedding for it.\n5. Find the most similar documents in your database using embeddings and cosine similarity.\n6. Include the most relevant documents (up to a size limit) in a GPT call along with the user's question.\n7. Display the results.\n\n
# Q
I'm looking for information on how to build a retrieval augmented generation application.
# A
You need to follow these steps:\n\n1. Find all the documents you want to use in your application.  The documents can be things like documentation, notes, articles, reference material, etc.\n2. Break them up into reasonably sized chunks if they are very large.\n3. Compute the embeddings for each document, and store in a database like Pinecone\n4. When the user asks a question, compute the embedding for it.\n5. Find the most similar documents in your database using embeddings and cosine similarity.\n6. Include the most relevant documents (up to a size limit) in a GPT call along with the user's question.\n7. Display the results.\n\n
# Q
Could you give me some tips on creating a retrieval augmented generation application?
# A
You need to follow these steps:\n\n1. Find all the documents you want to use in your application.  The documents can be things like documentation, notes, articles, reference material, etc.\n2. Break them up into reasonably sized chunks if they are very large.\n3. Compute the embeddings for each document, and store in a database like Pinecone\n4. When the user asks a question, compute the embedding for it.\n5. Find the most similar documents in your database using embeddings and cosine similarity.\n6. Include the most relevant documents (up to a size limit) in a GPT call along with the user's question.\n7. Display the results.\n\n
